/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct CredentialsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> CredentialsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> CredentialsApiClient<C> {
        CredentialsApiClient {
            configuration: configuration,
        }
    }
}

pub trait CredentialsApi {
    fn create_credentials(&self, version: String, environment_id: &str, credentials: ::models::Credentials) -> Box<Future<Item = ::models::Credentials, Error = Error<serde_json::Value>>>;
    fn delete_credentials(&self, version: String, environment_id: &str, credential_id: &str) -> Box<Future<Item = ::models::DeleteCredentials, Error = Error<serde_json::Value>>>;
    fn get_credentials(&self, version: String, environment_id: &str, credential_id: &str) -> Box<Future<Item = ::models::Credentials, Error = Error<serde_json::Value>>>;
    fn list_credentials(&self, version: String, environment_id: &str) -> Box<Future<Item = ::models::CredentialsList, Error = Error<serde_json::Value>>>;
    fn update_credentials(&self, version: String, environment_id: &str, credential_id: &str, credentials: ::models::Credentials) -> Box<Future<Item = ::models::Credentials, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>CredentialsApi for CredentialsApiClient<C> {
    fn create_credentials(&self, version: String, environment_id: &str, credentials: ::models::Credentials) -> Box<Future<Item = ::models::Credentials, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/v1/environments/{environment_id}/credentials".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("version".to_string(), version.to_string())
            .with_path_param("environment_id".to_string(), environment_id.to_string())
            .with_body_param(credentials)
            .execute(self.configuration.borrow())
    }

    fn delete_credentials(&self, version: String, environment_id: &str, credential_id: &str) -> Box<Future<Item = ::models::DeleteCredentials, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/v1/environments/{environment_id}/credentials/{credential_id}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("version".to_string(), version.to_string())
            .with_path_param("environment_id".to_string(), environment_id.to_string())
            .with_path_param("credential_id".to_string(), credential_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_credentials(&self, version: String, environment_id: &str, credential_id: &str) -> Box<Future<Item = ::models::Credentials, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/v1/environments/{environment_id}/credentials/{credential_id}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("version".to_string(), version.to_string())
            .with_path_param("environment_id".to_string(), environment_id.to_string())
            .with_path_param("credential_id".to_string(), credential_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_credentials(&self, version: String, environment_id: &str) -> Box<Future<Item = ::models::CredentialsList, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/v1/environments/{environment_id}/credentials".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("version".to_string(), version.to_string())
            .with_path_param("environment_id".to_string(), environment_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn update_credentials(&self, version: String, environment_id: &str, credential_id: &str, credentials: ::models::Credentials) -> Box<Future<Item = ::models::Credentials, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/v1/environments/{environment_id}/credentials/{credential_id}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("version".to_string(), version.to_string())
            .with_path_param("environment_id".to_string(), environment_id.to_string())
            .with_path_param("credential_id".to_string(), credential_id.to_string())
            .with_body_param(credentials)
            .execute(self.configuration.borrow())
    }

}
