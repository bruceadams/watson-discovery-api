/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct EventsAndFeedbackApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> EventsAndFeedbackApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> EventsAndFeedbackApiClient<C> {
        EventsAndFeedbackApiClient {
            configuration: configuration,
        }
    }
}

pub trait EventsAndFeedbackApi {
    fn create_event(&self, version: String, create_event_object: ::models::CreateEventObject) -> Box<Future<Item = ::models::CreateEventResponse, Error = Error<serde_json::Value>>>;
    fn get_metrics_event_rate(&self, version: String, start_time: String, end_time: String, result_type: &str) -> Box<Future<Item = ::models::MetricResponse, Error = Error<serde_json::Value>>>;
    fn get_metrics_query(&self, version: String, start_time: String, end_time: String, result_type: &str) -> Box<Future<Item = ::models::MetricResponse, Error = Error<serde_json::Value>>>;
    fn get_metrics_query_event(&self, version: String, start_time: String, end_time: String, result_type: &str) -> Box<Future<Item = ::models::MetricResponse, Error = Error<serde_json::Value>>>;
    fn get_metrics_query_no_results(&self, version: String, start_time: String, end_time: String, result_type: &str) -> Box<Future<Item = ::models::MetricResponse, Error = Error<serde_json::Value>>>;
    fn get_metrics_query_token_event(&self, version: String, count: i32) -> Box<Future<Item = ::models::MetricTokenResponse, Error = Error<serde_json::Value>>>;
    fn query_log(&self, version: String, filter: &str, query: &str, count: i32, offset: i32, sort: Vec<String>) -> Box<Future<Item = ::models::LogQueryResponse, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>EventsAndFeedbackApi for EventsAndFeedbackApiClient<C> {
    fn create_event(&self, version: String, create_event_object: ::models::CreateEventObject) -> Box<Future<Item = ::models::CreateEventResponse, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/v1/events".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("version".to_string(), version.to_string())
            .with_body_param(create_event_object)
            .execute(self.configuration.borrow())
    }

    fn get_metrics_event_rate(&self, version: String, start_time: String, end_time: String, result_type: &str) -> Box<Future<Item = ::models::MetricResponse, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/v1/metrics/event_rate".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("version".to_string(), version.to_string())
            .with_query_param("start_time".to_string(), start_time.to_string())
            .with_query_param("end_time".to_string(), end_time.to_string())
            .with_query_param("result_type".to_string(), result_type.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_metrics_query(&self, version: String, start_time: String, end_time: String, result_type: &str) -> Box<Future<Item = ::models::MetricResponse, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/v1/metrics/number_of_queries".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("version".to_string(), version.to_string())
            .with_query_param("start_time".to_string(), start_time.to_string())
            .with_query_param("end_time".to_string(), end_time.to_string())
            .with_query_param("result_type".to_string(), result_type.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_metrics_query_event(&self, version: String, start_time: String, end_time: String, result_type: &str) -> Box<Future<Item = ::models::MetricResponse, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/v1/metrics/number_of_queries_with_event".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("version".to_string(), version.to_string())
            .with_query_param("start_time".to_string(), start_time.to_string())
            .with_query_param("end_time".to_string(), end_time.to_string())
            .with_query_param("result_type".to_string(), result_type.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_metrics_query_no_results(&self, version: String, start_time: String, end_time: String, result_type: &str) -> Box<Future<Item = ::models::MetricResponse, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/v1/metrics/number_of_queries_with_no_search_results".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("version".to_string(), version.to_string())
            .with_query_param("start_time".to_string(), start_time.to_string())
            .with_query_param("end_time".to_string(), end_time.to_string())
            .with_query_param("result_type".to_string(), result_type.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_metrics_query_token_event(&self, version: String, count: i32) -> Box<Future<Item = ::models::MetricTokenResponse, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/v1/metrics/top_query_tokens_with_event_rate".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("version".to_string(), version.to_string())
            .with_query_param("count".to_string(), count.to_string())
            .execute(self.configuration.borrow())
    }

    fn query_log(&self, version: String, filter: &str, query: &str, count: i32, offset: i32, sort: Vec<String>) -> Box<Future<Item = ::models::LogQueryResponse, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/v1/logs".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Authorization".to_owned(),
            }))
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("version".to_string(), version.to_string())
            .with_query_param("filter".to_string(), filter.to_string())
            .with_query_param("query".to_string(), query.to_string())
            .with_query_param("count".to_string(), count.to_string())
            .with_query_param("offset".to_string(), offset.to_string())
            .with_query_param("sort".to_string(), sort.join(",").to_string())
            .execute(self.configuration.borrow())
    }

}
