/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// DocumentStatus : Status information about a submitted document.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DocumentStatus {
  /// The unique identifier of the document.
  #[serde(rename = "document_id")]
  document_id: String,
  /// The unique identifier for the configuration.
  #[serde(rename = "configuration_id")]
  configuration_id: Option<String>,
  /// The creation date of the document in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
  #[serde(rename = "created")]
  created: Option<String>,
  /// Date of the most recent document update, in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
  #[serde(rename = "updated")]
  updated: Option<String>,
  /// Status of the document in the ingestion process.
  #[serde(rename = "status")]
  status: String,
  /// Description of the document status.
  #[serde(rename = "status_description")]
  status_description: String,
  /// Name of the original source file (if available).
  #[serde(rename = "filename")]
  filename: Option<String>,
  /// The type of the original source file.
  #[serde(rename = "file_type")]
  file_type: Option<String>,
  /// The SHA-1 hash of the original source file (formatted as a hexadecimal string).
  #[serde(rename = "sha1")]
  sha1: Option<String>,
  /// Array of notices produced by the document-ingestion process.
  #[serde(rename = "notices")]
  notices: Vec<::models::Notice>
}

impl DocumentStatus {
  /// Status information about a submitted document.
  pub fn new(document_id: String, status: String, status_description: String, notices: Vec<::models::Notice>) -> DocumentStatus {
    DocumentStatus {
      document_id: document_id,
      configuration_id: None,
      created: None,
      updated: None,
      status: status,
      status_description: status_description,
      filename: None,
      file_type: None,
      sha1: None,
      notices: notices
    }
  }

  pub fn set_document_id(&mut self, document_id: String) {
    self.document_id = document_id;
  }

  pub fn with_document_id(mut self, document_id: String) -> DocumentStatus {
    self.document_id = document_id;
    self
  }

  pub fn document_id(&self) -> &String {
    &self.document_id
  }


  pub fn set_configuration_id(&mut self, configuration_id: String) {
    self.configuration_id = Some(configuration_id);
  }

  pub fn with_configuration_id(mut self, configuration_id: String) -> DocumentStatus {
    self.configuration_id = Some(configuration_id);
    self
  }

  pub fn configuration_id(&self) -> Option<&String> {
    self.configuration_id.as_ref()
  }

  pub fn reset_configuration_id(&mut self) {
    self.configuration_id = None;
  }

  pub fn set_created(&mut self, created: String) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: String) -> DocumentStatus {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&String> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_updated(&mut self, updated: String) {
    self.updated = Some(updated);
  }

  pub fn with_updated(mut self, updated: String) -> DocumentStatus {
    self.updated = Some(updated);
    self
  }

  pub fn updated(&self) -> Option<&String> {
    self.updated.as_ref()
  }

  pub fn reset_updated(&mut self) {
    self.updated = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = status;
  }

  pub fn with_status(mut self, status: String) -> DocumentStatus {
    self.status = status;
    self
  }

  pub fn status(&self) -> &String {
    &self.status
  }


  pub fn set_status_description(&mut self, status_description: String) {
    self.status_description = status_description;
  }

  pub fn with_status_description(mut self, status_description: String) -> DocumentStatus {
    self.status_description = status_description;
    self
  }

  pub fn status_description(&self) -> &String {
    &self.status_description
  }


  pub fn set_filename(&mut self, filename: String) {
    self.filename = Some(filename);
  }

  pub fn with_filename(mut self, filename: String) -> DocumentStatus {
    self.filename = Some(filename);
    self
  }

  pub fn filename(&self) -> Option<&String> {
    self.filename.as_ref()
  }

  pub fn reset_filename(&mut self) {
    self.filename = None;
  }

  pub fn set_file_type(&mut self, file_type: String) {
    self.file_type = Some(file_type);
  }

  pub fn with_file_type(mut self, file_type: String) -> DocumentStatus {
    self.file_type = Some(file_type);
    self
  }

  pub fn file_type(&self) -> Option<&String> {
    self.file_type.as_ref()
  }

  pub fn reset_file_type(&mut self) {
    self.file_type = None;
  }

  pub fn set_sha1(&mut self, sha1: String) {
    self.sha1 = Some(sha1);
  }

  pub fn with_sha1(mut self, sha1: String) -> DocumentStatus {
    self.sha1 = Some(sha1);
    self
  }

  pub fn sha1(&self) -> Option<&String> {
    self.sha1.as_ref()
  }

  pub fn reset_sha1(&mut self) {
    self.sha1 = None;
  }

  pub fn set_notices(&mut self, notices: Vec<::models::Notice>) {
    self.notices = notices;
  }

  pub fn with_notices(mut self, notices: Vec<::models::Notice>) -> DocumentStatus {
    self.notices = notices;
    self
  }

  pub fn notices(&self) -> &Vec<::models::Notice> {
    &self.notices
  }


}



