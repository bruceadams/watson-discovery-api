/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// TokenDictStatusResponse : Object describing the current status of the wordlist.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TokenDictStatusResponse {
  /// Current wordlist status for the specified collection.
  #[serde(rename = "status")]
  status: Option<String>,
  /// The type for this wordlist. Can be `tokenization_dictionary` or `stopwords`.
  #[serde(rename = "type")]
  type_: Option<String>
}

impl TokenDictStatusResponse {
  /// Object describing the current status of the wordlist.
  pub fn new() -> TokenDictStatusResponse {
    TokenDictStatusResponse {
      status: None,
      type_: None
    }
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> TokenDictStatusResponse {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_type_(&mut self, type_: String) {
    self.type_ = Some(type_);
  }

  pub fn with_type_(mut self, type_: String) -> TokenDictStatusResponse {
    self.type_ = Some(type_);
    self
  }

  pub fn type_(&self) -> Option<&String> {
    self.type_.as_ref()
  }

  pub fn reset_type_(&mut self) {
    self.type_ = None;
  }

}



