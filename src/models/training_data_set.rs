/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TrainingDataSet {
  #[serde(rename = "environment_id")]
  environment_id: Option<String>,
  #[serde(rename = "collection_id")]
  collection_id: Option<String>,
  #[serde(rename = "queries")]
  queries: Option<Vec<::models::TrainingQuery>>
}

impl TrainingDataSet {
  pub fn new() -> TrainingDataSet {
    TrainingDataSet {
      environment_id: None,
      collection_id: None,
      queries: None
    }
  }

  pub fn set_environment_id(&mut self, environment_id: String) {
    self.environment_id = Some(environment_id);
  }

  pub fn with_environment_id(mut self, environment_id: String) -> TrainingDataSet {
    self.environment_id = Some(environment_id);
    self
  }

  pub fn environment_id(&self) -> Option<&String> {
    self.environment_id.as_ref()
  }

  pub fn reset_environment_id(&mut self) {
    self.environment_id = None;
  }

  pub fn set_collection_id(&mut self, collection_id: String) {
    self.collection_id = Some(collection_id);
  }

  pub fn with_collection_id(mut self, collection_id: String) -> TrainingDataSet {
    self.collection_id = Some(collection_id);
    self
  }

  pub fn collection_id(&self) -> Option<&String> {
    self.collection_id.as_ref()
  }

  pub fn reset_collection_id(&mut self) {
    self.collection_id = None;
  }

  pub fn set_queries(&mut self, queries: Vec<::models::TrainingQuery>) {
    self.queries = Some(queries);
  }

  pub fn with_queries(mut self, queries: Vec<::models::TrainingQuery>) -> TrainingDataSet {
    self.queries = Some(queries);
    self
  }

  pub fn queries(&self) -> Option<&Vec<::models::TrainingQuery>> {
    self.queries.as_ref()
  }

  pub fn reset_queries(&mut self) {
    self.queries = None;
  }

}



