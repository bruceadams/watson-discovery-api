/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// SegmentSettings : A list of Document Segmentation settings.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SegmentSettings {
  /// Enables/disables the Document Segmentation feature.
  #[serde(rename = "enabled")]
  enabled: Option<bool>,
  /// Defines the heading level that splits into document segments. Valid values are h1, h2, h3, h4, h5, h6.
  #[serde(rename = "selector_tags")]
  selector_tags: Option<Vec<String>>
}

impl SegmentSettings {
  /// A list of Document Segmentation settings.
  pub fn new() -> SegmentSettings {
    SegmentSettings {
      enabled: None,
      selector_tags: None
    }
  }

  pub fn set_enabled(&mut self, enabled: bool) {
    self.enabled = Some(enabled);
  }

  pub fn with_enabled(mut self, enabled: bool) -> SegmentSettings {
    self.enabled = Some(enabled);
    self
  }

  pub fn enabled(&self) -> Option<&bool> {
    self.enabled.as_ref()
  }

  pub fn reset_enabled(&mut self) {
    self.enabled = None;
  }

  pub fn set_selector_tags(&mut self, selector_tags: Vec<String>) {
    self.selector_tags = Some(selector_tags);
  }

  pub fn with_selector_tags(mut self, selector_tags: Vec<String>) -> SegmentSettings {
    self.selector_tags = Some(selector_tags);
    self
  }

  pub fn selector_tags(&self) -> Option<&Vec<String>> {
    self.selector_tags.as_ref()
  }

  pub fn reset_selector_tags(&mut self) {
    self.selector_tags = None;
  }

}



