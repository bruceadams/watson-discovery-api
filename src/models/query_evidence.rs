/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// QueryEvidence : Description of evidence location supporting Knoweldge Graph query result.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct QueryEvidence {
  /// The docuemnt ID (as indexed in Discovery) of the evidence location.
  #[serde(rename = "document_id")]
  document_id: Option<String>,
  /// The field of the document where the supporting evidence was identified.
  #[serde(rename = "field")]
  field: Option<String>,
  /// The start location of the evidence in the identified field. This value is inclusive.
  #[serde(rename = "start_offset")]
  start_offset: Option<i32>,
  /// The end location of the evidence in the identified field. This value is inclusive.
  #[serde(rename = "end_offset")]
  end_offset: Option<i32>,
  /// An array of entity objects that show evidence of the result.
  #[serde(rename = "entities")]
  entities: Option<Vec<::models::QueryEvidenceEntity>>
}

impl QueryEvidence {
  /// Description of evidence location supporting Knoweldge Graph query result.
  pub fn new() -> QueryEvidence {
    QueryEvidence {
      document_id: None,
      field: None,
      start_offset: None,
      end_offset: None,
      entities: None
    }
  }

  pub fn set_document_id(&mut self, document_id: String) {
    self.document_id = Some(document_id);
  }

  pub fn with_document_id(mut self, document_id: String) -> QueryEvidence {
    self.document_id = Some(document_id);
    self
  }

  pub fn document_id(&self) -> Option<&String> {
    self.document_id.as_ref()
  }

  pub fn reset_document_id(&mut self) {
    self.document_id = None;
  }

  pub fn set_field(&mut self, field: String) {
    self.field = Some(field);
  }

  pub fn with_field(mut self, field: String) -> QueryEvidence {
    self.field = Some(field);
    self
  }

  pub fn field(&self) -> Option<&String> {
    self.field.as_ref()
  }

  pub fn reset_field(&mut self) {
    self.field = None;
  }

  pub fn set_start_offset(&mut self, start_offset: i32) {
    self.start_offset = Some(start_offset);
  }

  pub fn with_start_offset(mut self, start_offset: i32) -> QueryEvidence {
    self.start_offset = Some(start_offset);
    self
  }

  pub fn start_offset(&self) -> Option<&i32> {
    self.start_offset.as_ref()
  }

  pub fn reset_start_offset(&mut self) {
    self.start_offset = None;
  }

  pub fn set_end_offset(&mut self, end_offset: i32) {
    self.end_offset = Some(end_offset);
  }

  pub fn with_end_offset(mut self, end_offset: i32) -> QueryEvidence {
    self.end_offset = Some(end_offset);
    self
  }

  pub fn end_offset(&self) -> Option<&i32> {
    self.end_offset.as_ref()
  }

  pub fn reset_end_offset(&mut self) {
    self.end_offset = None;
  }

  pub fn set_entities(&mut self, entities: Vec<::models::QueryEvidenceEntity>) {
    self.entities = Some(entities);
  }

  pub fn with_entities(mut self, entities: Vec<::models::QueryEvidenceEntity>) -> QueryEvidence {
    self.entities = Some(entities);
    self
  }

  pub fn entities(&self) -> Option<&Vec<::models::QueryEvidenceEntity>> {
    self.entities.as_ref()
  }

  pub fn reset_entities(&mut self) {
    self.entities = None;
  }

}



