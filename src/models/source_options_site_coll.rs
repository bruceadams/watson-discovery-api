/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// SourceOptionsSiteColl : Object that defines a Microsoft SharePoint site collection to crawl with this configuration.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SourceOptionsSiteColl {
  /// The Microsoft SharePoint Online site collection path to crawl. The path must be be relative to the **organization_url** that was specified in the credentials associated with this source configuration.
  #[serde(rename = "site_collection_path")]
  site_collection_path: String,
  /// The maximum number of documents to crawl for this site collection. By default, all documents in the site collection are crawled.
  #[serde(rename = "limit")]
  limit: Option<i32>
}

impl SourceOptionsSiteColl {
  /// Object that defines a Microsoft SharePoint site collection to crawl with this configuration.
  pub fn new(site_collection_path: String) -> SourceOptionsSiteColl {
    SourceOptionsSiteColl {
      site_collection_path: site_collection_path,
      limit: None
    }
  }

  pub fn set_site_collection_path(&mut self, site_collection_path: String) {
    self.site_collection_path = site_collection_path;
  }

  pub fn with_site_collection_path(mut self, site_collection_path: String) -> SourceOptionsSiteColl {
    self.site_collection_path = site_collection_path;
    self
  }

  pub fn site_collection_path(&self) -> &String {
    &self.site_collection_path
  }


  pub fn set_limit(&mut self, limit: i32) {
    self.limit = Some(limit);
  }

  pub fn with_limit(mut self, limit: i32) -> SourceOptionsSiteColl {
    self.limit = Some(limit);
    self
  }

  pub fn limit(&self) -> Option<&i32> {
    self.limit.as_ref()
  }

  pub fn reset_limit(&mut self) {
    self.limit = None;
  }

}



