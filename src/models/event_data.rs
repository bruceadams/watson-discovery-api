/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// EventData : Query event data object.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct EventData {
  /// The **environment_id** associated with the query that the event is associated with.
  #[serde(rename = "environment_id")]
  environment_id: String,
  /// The session token that was returned as part of the query results that this event is associated with.
  #[serde(rename = "session_token")]
  session_token: String,
  /// The optional timestamp for the event that was created. If not provided, the time that the event was created in the log was used.
  #[serde(rename = "client_timestamp")]
  client_timestamp: Option<String>,
  /// The rank of the result item which the event is associated with.
  #[serde(rename = "display_rank")]
  display_rank: Option<i32>,
  /// The **collection_id** of the document that this event is associated with.
  #[serde(rename = "collection_id")]
  collection_id: String,
  /// The **document_id** of the document that this event is associated with.
  #[serde(rename = "document_id")]
  document_id: String,
  /// The query identifier stored in the log. The query and any events associated with that query are stored with the same **query_id**.
  #[serde(rename = "query_id")]
  query_id: Option<String>
}

impl EventData {
  /// Query event data object.
  pub fn new(environment_id: String, session_token: String, collection_id: String, document_id: String) -> EventData {
    EventData {
      environment_id: environment_id,
      session_token: session_token,
      client_timestamp: None,
      display_rank: None,
      collection_id: collection_id,
      document_id: document_id,
      query_id: None
    }
  }

  pub fn set_environment_id(&mut self, environment_id: String) {
    self.environment_id = environment_id;
  }

  pub fn with_environment_id(mut self, environment_id: String) -> EventData {
    self.environment_id = environment_id;
    self
  }

  pub fn environment_id(&self) -> &String {
    &self.environment_id
  }


  pub fn set_session_token(&mut self, session_token: String) {
    self.session_token = session_token;
  }

  pub fn with_session_token(mut self, session_token: String) -> EventData {
    self.session_token = session_token;
    self
  }

  pub fn session_token(&self) -> &String {
    &self.session_token
  }


  pub fn set_client_timestamp(&mut self, client_timestamp: String) {
    self.client_timestamp = Some(client_timestamp);
  }

  pub fn with_client_timestamp(mut self, client_timestamp: String) -> EventData {
    self.client_timestamp = Some(client_timestamp);
    self
  }

  pub fn client_timestamp(&self) -> Option<&String> {
    self.client_timestamp.as_ref()
  }

  pub fn reset_client_timestamp(&mut self) {
    self.client_timestamp = None;
  }

  pub fn set_display_rank(&mut self, display_rank: i32) {
    self.display_rank = Some(display_rank);
  }

  pub fn with_display_rank(mut self, display_rank: i32) -> EventData {
    self.display_rank = Some(display_rank);
    self
  }

  pub fn display_rank(&self) -> Option<&i32> {
    self.display_rank.as_ref()
  }

  pub fn reset_display_rank(&mut self) {
    self.display_rank = None;
  }

  pub fn set_collection_id(&mut self, collection_id: String) {
    self.collection_id = collection_id;
  }

  pub fn with_collection_id(mut self, collection_id: String) -> EventData {
    self.collection_id = collection_id;
    self
  }

  pub fn collection_id(&self) -> &String {
    &self.collection_id
  }


  pub fn set_document_id(&mut self, document_id: String) {
    self.document_id = document_id;
  }

  pub fn with_document_id(mut self, document_id: String) -> EventData {
    self.document_id = document_id;
    self
  }

  pub fn document_id(&self) -> &String {
    &self.document_id
  }


  pub fn set_query_id(&mut self, query_id: String) {
    self.query_id = Some(query_id);
  }

  pub fn with_query_id(mut self, query_id: String) -> EventData {
    self.query_id = Some(query_id);
    self
  }

  pub fn query_id(&self) -> Option<&String> {
    self.query_id.as_ref()
  }

  pub fn reset_query_id(&mut self) {
    self.query_id = None;
  }

}



