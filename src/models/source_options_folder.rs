/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// SourceOptionsFolder : Object that defines a box folder to crawl with this configuration.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SourceOptionsFolder {
  /// The Box user ID of the user who owns the folder to crawl.
  #[serde(rename = "owner_user_id")]
  owner_user_id: String,
  /// The Box folder ID of the folder to crawl.
  #[serde(rename = "folder_id")]
  folder_id: String,
  /// The maximum number of documents to crawl for this folder. By default, all documents in the folder are crawled.
  #[serde(rename = "limit")]
  limit: Option<i32>
}

impl SourceOptionsFolder {
  /// Object that defines a box folder to crawl with this configuration.
  pub fn new(owner_user_id: String, folder_id: String) -> SourceOptionsFolder {
    SourceOptionsFolder {
      owner_user_id: owner_user_id,
      folder_id: folder_id,
      limit: None
    }
  }

  pub fn set_owner_user_id(&mut self, owner_user_id: String) {
    self.owner_user_id = owner_user_id;
  }

  pub fn with_owner_user_id(mut self, owner_user_id: String) -> SourceOptionsFolder {
    self.owner_user_id = owner_user_id;
    self
  }

  pub fn owner_user_id(&self) -> &String {
    &self.owner_user_id
  }


  pub fn set_folder_id(&mut self, folder_id: String) {
    self.folder_id = folder_id;
  }

  pub fn with_folder_id(mut self, folder_id: String) -> SourceOptionsFolder {
    self.folder_id = folder_id;
    self
  }

  pub fn folder_id(&self) -> &String {
    &self.folder_id
  }


  pub fn set_limit(&mut self, limit: i32) {
    self.limit = Some(limit);
  }

  pub fn with_limit(mut self, limit: i32) -> SourceOptionsFolder {
    self.limit = Some(limit);
    self
  }

  pub fn limit(&self) -> Option<&i32> {
    self.limit.as_ref()
  }

  pub fn reset_limit(&mut self) {
    self.limit = None;
  }

}



