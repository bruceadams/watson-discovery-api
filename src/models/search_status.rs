/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// SearchStatus : Information about the Continuous Relevancy Training for this environment.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SearchStatus {
  /// Current scope of the training. Always returned as `environment`.
  #[serde(rename = "scope")]
  scope: Option<String>,
  /// The current status of Continuous Relevancy Training for this environment.
  #[serde(rename = "status")]
  status: Option<String>,
  /// Long description of the current Continuous Relevancy Training status.
  #[serde(rename = "status_description")]
  status_description: Option<String>,
  /// The date stamp of the most recent completed training for this environment.
  #[serde(rename = "last_trained")]
  last_trained: Option<String>
}

impl SearchStatus {
  /// Information about the Continuous Relevancy Training for this environment.
  pub fn new() -> SearchStatus {
    SearchStatus {
      scope: None,
      status: None,
      status_description: None,
      last_trained: None
    }
  }

  pub fn set_scope(&mut self, scope: String) {
    self.scope = Some(scope);
  }

  pub fn with_scope(mut self, scope: String) -> SearchStatus {
    self.scope = Some(scope);
    self
  }

  pub fn scope(&self) -> Option<&String> {
    self.scope.as_ref()
  }

  pub fn reset_scope(&mut self) {
    self.scope = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> SearchStatus {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_status_description(&mut self, status_description: String) {
    self.status_description = Some(status_description);
  }

  pub fn with_status_description(mut self, status_description: String) -> SearchStatus {
    self.status_description = Some(status_description);
    self
  }

  pub fn status_description(&self) -> Option<&String> {
    self.status_description.as_ref()
  }

  pub fn reset_status_description(&mut self) {
    self.status_description = None;
  }

  pub fn set_last_trained(&mut self, last_trained: String) {
    self.last_trained = Some(last_trained);
  }

  pub fn with_last_trained(mut self, last_trained: String) -> SearchStatus {
    self.last_trained = Some(last_trained);
    self
  }

  pub fn last_trained(&self) -> Option<&String> {
    self.last_trained.as_ref()
  }

  pub fn reset_last_trained(&mut self) {
    self.last_trained = None;
  }

}



