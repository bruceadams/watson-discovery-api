/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// SourceSchedule : Object containing the schedule information for the source.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SourceSchedule {
  /// When `true`, the source is re-crawled based on the **frequency** field in this object. When `false` the source is not re-crawled; When `false` and connecting to Salesforce the source is crawled annually.
  #[serde(rename = "enabled")]
  enabled: Option<bool>,
  /// The time zone to base source crawl times on. Possible values correspond to the IANA (Internet Assigned Numbers Authority) time zones list.
  #[serde(rename = "time_zone")]
  time_zone: Option<String>,
  /// The crawl schedule in the specified **time_zone**.  -  `daily`: Runs every day between 00:00 and 06:00. -  `weekly`: Runs every week on Sunday between 00:00 and 06:00. -  `monthly`: Runs the on the first Sunday of every month between 00:00 and 06:00.
  #[serde(rename = "frequency")]
  frequency: Option<String>
}

impl SourceSchedule {
  /// Object containing the schedule information for the source.
  pub fn new() -> SourceSchedule {
    SourceSchedule {
      enabled: None,
      time_zone: None,
      frequency: None
    }
  }

  pub fn set_enabled(&mut self, enabled: bool) {
    self.enabled = Some(enabled);
  }

  pub fn with_enabled(mut self, enabled: bool) -> SourceSchedule {
    self.enabled = Some(enabled);
    self
  }

  pub fn enabled(&self) -> Option<&bool> {
    self.enabled.as_ref()
  }

  pub fn reset_enabled(&mut self) {
    self.enabled = None;
  }

  pub fn set_time_zone(&mut self, time_zone: String) {
    self.time_zone = Some(time_zone);
  }

  pub fn with_time_zone(mut self, time_zone: String) -> SourceSchedule {
    self.time_zone = Some(time_zone);
    self
  }

  pub fn time_zone(&self) -> Option<&String> {
    self.time_zone.as_ref()
  }

  pub fn reset_time_zone(&mut self) {
    self.time_zone = None;
  }

  pub fn set_frequency(&mut self, frequency: String) {
    self.frequency = Some(frequency);
  }

  pub fn with_frequency(mut self, frequency: String) -> SourceSchedule {
    self.frequency = Some(frequency);
    self
  }

  pub fn frequency(&self) -> Option<&String> {
    self.frequency.as_ref()
  }

  pub fn reset_frequency(&mut self) {
    self.frequency = None;
  }

}



