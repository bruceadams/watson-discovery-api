/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Notice : A notice produced for the collection.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Notice {
  /// Identifies the notice. Many notices might have the same ID. This field exists so that user applications can programmatically identify a notice and take automatic corrective action.
  #[serde(rename = "notice_id")]
  notice_id: Option<String>,
  /// The creation date of the collection in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
  #[serde(rename = "created")]
  created: Option<String>,
  /// Unique identifier of the document.
  #[serde(rename = "document_id")]
  document_id: Option<String>,
  /// Unique identifier of the query used for relevance training.
  #[serde(rename = "query_id")]
  query_id: Option<String>,
  /// Severity level of the notice.
  #[serde(rename = "severity")]
  severity: Option<String>,
  /// Ingestion or training step in which the notice occurred.
  #[serde(rename = "step")]
  step: Option<String>,
  /// The description of the notice.
  #[serde(rename = "description")]
  description: Option<String>
}

impl Notice {
  /// A notice produced for the collection.
  pub fn new() -> Notice {
    Notice {
      notice_id: None,
      created: None,
      document_id: None,
      query_id: None,
      severity: None,
      step: None,
      description: None
    }
  }

  pub fn set_notice_id(&mut self, notice_id: String) {
    self.notice_id = Some(notice_id);
  }

  pub fn with_notice_id(mut self, notice_id: String) -> Notice {
    self.notice_id = Some(notice_id);
    self
  }

  pub fn notice_id(&self) -> Option<&String> {
    self.notice_id.as_ref()
  }

  pub fn reset_notice_id(&mut self) {
    self.notice_id = None;
  }

  pub fn set_created(&mut self, created: String) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: String) -> Notice {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&String> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_document_id(&mut self, document_id: String) {
    self.document_id = Some(document_id);
  }

  pub fn with_document_id(mut self, document_id: String) -> Notice {
    self.document_id = Some(document_id);
    self
  }

  pub fn document_id(&self) -> Option<&String> {
    self.document_id.as_ref()
  }

  pub fn reset_document_id(&mut self) {
    self.document_id = None;
  }

  pub fn set_query_id(&mut self, query_id: String) {
    self.query_id = Some(query_id);
  }

  pub fn with_query_id(mut self, query_id: String) -> Notice {
    self.query_id = Some(query_id);
    self
  }

  pub fn query_id(&self) -> Option<&String> {
    self.query_id.as_ref()
  }

  pub fn reset_query_id(&mut self) {
    self.query_id = None;
  }

  pub fn set_severity(&mut self, severity: String) {
    self.severity = Some(severity);
  }

  pub fn with_severity(mut self, severity: String) -> Notice {
    self.severity = Some(severity);
    self
  }

  pub fn severity(&self) -> Option<&String> {
    self.severity.as_ref()
  }

  pub fn reset_severity(&mut self) {
    self.severity = None;
  }

  pub fn set_step(&mut self, step: String) {
    self.step = Some(step);
  }

  pub fn with_step(mut self, step: String) -> Notice {
    self.step = Some(step);
    self
  }

  pub fn step(&self) -> Option<&String> {
    self.step.as_ref()
  }

  pub fn reset_step(&mut self) {
    self.step = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> Notice {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

}



