/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct QueryRelationsFilter {
  #[serde(rename = "relation_types")]
  relation_types: Option<::models::QueryFilterType>,
  #[serde(rename = "entity_types")]
  entity_types: Option<::models::QueryFilterType>,
  /// A comma-separated list of document IDs to include in the query
  #[serde(rename = "document_ids")]
  document_ids: Option<Vec<String>>
}

impl QueryRelationsFilter {
  pub fn new() -> QueryRelationsFilter {
    QueryRelationsFilter {
      relation_types: None,
      entity_types: None,
      document_ids: None
    }
  }

  pub fn set_relation_types(&mut self, relation_types: ::models::QueryFilterType) {
    self.relation_types = Some(relation_types);
  }

  pub fn with_relation_types(mut self, relation_types: ::models::QueryFilterType) -> QueryRelationsFilter {
    self.relation_types = Some(relation_types);
    self
  }

  pub fn relation_types(&self) -> Option<&::models::QueryFilterType> {
    self.relation_types.as_ref()
  }

  pub fn reset_relation_types(&mut self) {
    self.relation_types = None;
  }

  pub fn set_entity_types(&mut self, entity_types: ::models::QueryFilterType) {
    self.entity_types = Some(entity_types);
  }

  pub fn with_entity_types(mut self, entity_types: ::models::QueryFilterType) -> QueryRelationsFilter {
    self.entity_types = Some(entity_types);
    self
  }

  pub fn entity_types(&self) -> Option<&::models::QueryFilterType> {
    self.entity_types.as_ref()
  }

  pub fn reset_entity_types(&mut self) {
    self.entity_types = None;
  }

  pub fn set_document_ids(&mut self, document_ids: Vec<String>) {
    self.document_ids = Some(document_ids);
  }

  pub fn with_document_ids(mut self, document_ids: Vec<String>) -> QueryRelationsFilter {
    self.document_ids = Some(document_ids);
    self
  }

  pub fn document_ids(&self) -> Option<&Vec<String>> {
    self.document_ids.as_ref()
  }

  pub fn reset_document_ids(&mut self) {
    self.document_ids = None;
  }

}



