/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TopHitsResults {
  /// Number of matching results.
  #[serde(rename = "matching_results")]
  matching_results: Option<i32>,
  /// Top results returned by the aggregation.
  #[serde(rename = "hits")]
  hits: Option<Vec<::models::QueryResult>>
}

impl TopHitsResults {
  pub fn new() -> TopHitsResults {
    TopHitsResults {
      matching_results: None,
      hits: None
    }
  }

  pub fn set_matching_results(&mut self, matching_results: i32) {
    self.matching_results = Some(matching_results);
  }

  pub fn with_matching_results(mut self, matching_results: i32) -> TopHitsResults {
    self.matching_results = Some(matching_results);
    self
  }

  pub fn matching_results(&self) -> Option<&i32> {
    self.matching_results.as_ref()
  }

  pub fn reset_matching_results(&mut self) {
    self.matching_results = None;
  }

  pub fn set_hits(&mut self, hits: Vec<::models::QueryResult>) {
    self.hits = Some(hits);
  }

  pub fn with_hits(mut self, hits: Vec<::models::QueryResult>) -> TopHitsResults {
    self.hits = Some(hits);
    self
  }

  pub fn hits(&self) -> Option<&Vec<::models::QueryResult>> {
    self.hits.as_ref()
  }

  pub fn reset_hits(&mut self) {
    self.hits = None;
  }

}



