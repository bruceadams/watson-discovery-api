/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// NluEnrichmentEntities : An object speficying the Entities enrichment and related parameters.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NluEnrichmentEntities {
  /// When `true`, sentiment analysis of entities will be performed on the specified field.
  #[serde(rename = "sentiment")]
  sentiment: Option<bool>,
  /// When `true`, emotion detection of entities will be performed on the specified field.
  #[serde(rename = "emotion")]
  emotion: Option<bool>,
  /// The maximum number of entities to extract for each instance of the specified field.
  #[serde(rename = "limit")]
  limit: Option<i32>,
  /// When `true`, the number of mentions of each identified entity is recorded. The default is `false`
  #[serde(rename = "mentions")]
  mentions: Option<bool>,
  /// When `true`, the types of mentions for each idetifieid entity is recorded. The default is `false`. 
  #[serde(rename = "mention_types")]
  mention_types: Option<bool>,
  /// When `true`, a list of sentence locations for each instance of each identified entity is recorded. The default is `false`.
  #[serde(rename = "sentence_locations")]
  sentence_locations: Option<bool>,
  /// The enrichement model to use with entity extraction. May be a custom model provided by Watson Knowledge Studio, the public model for use with Knowledge Graph `en-news`, or the default public model `alchemy`.
  #[serde(rename = "model")]
  model: Option<String>
}

impl NluEnrichmentEntities {
  /// An object speficying the Entities enrichment and related parameters.
  pub fn new() -> NluEnrichmentEntities {
    NluEnrichmentEntities {
      sentiment: None,
      emotion: None,
      limit: None,
      mentions: None,
      mention_types: None,
      sentence_locations: None,
      model: None
    }
  }

  pub fn set_sentiment(&mut self, sentiment: bool) {
    self.sentiment = Some(sentiment);
  }

  pub fn with_sentiment(mut self, sentiment: bool) -> NluEnrichmentEntities {
    self.sentiment = Some(sentiment);
    self
  }

  pub fn sentiment(&self) -> Option<&bool> {
    self.sentiment.as_ref()
  }

  pub fn reset_sentiment(&mut self) {
    self.sentiment = None;
  }

  pub fn set_emotion(&mut self, emotion: bool) {
    self.emotion = Some(emotion);
  }

  pub fn with_emotion(mut self, emotion: bool) -> NluEnrichmentEntities {
    self.emotion = Some(emotion);
    self
  }

  pub fn emotion(&self) -> Option<&bool> {
    self.emotion.as_ref()
  }

  pub fn reset_emotion(&mut self) {
    self.emotion = None;
  }

  pub fn set_limit(&mut self, limit: i32) {
    self.limit = Some(limit);
  }

  pub fn with_limit(mut self, limit: i32) -> NluEnrichmentEntities {
    self.limit = Some(limit);
    self
  }

  pub fn limit(&self) -> Option<&i32> {
    self.limit.as_ref()
  }

  pub fn reset_limit(&mut self) {
    self.limit = None;
  }

  pub fn set_mentions(&mut self, mentions: bool) {
    self.mentions = Some(mentions);
  }

  pub fn with_mentions(mut self, mentions: bool) -> NluEnrichmentEntities {
    self.mentions = Some(mentions);
    self
  }

  pub fn mentions(&self) -> Option<&bool> {
    self.mentions.as_ref()
  }

  pub fn reset_mentions(&mut self) {
    self.mentions = None;
  }

  pub fn set_mention_types(&mut self, mention_types: bool) {
    self.mention_types = Some(mention_types);
  }

  pub fn with_mention_types(mut self, mention_types: bool) -> NluEnrichmentEntities {
    self.mention_types = Some(mention_types);
    self
  }

  pub fn mention_types(&self) -> Option<&bool> {
    self.mention_types.as_ref()
  }

  pub fn reset_mention_types(&mut self) {
    self.mention_types = None;
  }

  pub fn set_sentence_locations(&mut self, sentence_locations: bool) {
    self.sentence_locations = Some(sentence_locations);
  }

  pub fn with_sentence_locations(mut self, sentence_locations: bool) -> NluEnrichmentEntities {
    self.sentence_locations = Some(sentence_locations);
    self
  }

  pub fn sentence_locations(&self) -> Option<&bool> {
    self.sentence_locations.as_ref()
  }

  pub fn reset_sentence_locations(&mut self) {
    self.sentence_locations = None;
  }

  pub fn set_model(&mut self, model: String) {
    self.model = Some(model);
  }

  pub fn with_model(mut self, model: String) -> NluEnrichmentEntities {
    self.model = Some(model);
    self
  }

  pub fn model(&self) -> Option<&String> {
    self.model.as_ref()
  }

  pub fn reset_model(&mut self) {
    self.model = None;
  }

}



