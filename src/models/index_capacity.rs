/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IndexCapacity : Details about the resource usage and capacity of the environment.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IndexCapacity {
  #[serde(rename = "documents")]
  documents: Option<::models::EnvironmentDocuments>,
  #[serde(rename = "disk_usage")]
  disk_usage: Option<::models::DiskUsage>,
  #[serde(rename = "collections")]
  collections: Option<::models::CollectionUsage>,
  #[serde(rename = "memory_usage")]
  memory_usage: Option<::models::MemoryUsage>
}

impl IndexCapacity {
  /// Details about the resource usage and capacity of the environment.
  pub fn new() -> IndexCapacity {
    IndexCapacity {
      documents: None,
      disk_usage: None,
      collections: None,
      memory_usage: None
    }
  }

  pub fn set_documents(&mut self, documents: ::models::EnvironmentDocuments) {
    self.documents = Some(documents);
  }

  pub fn with_documents(mut self, documents: ::models::EnvironmentDocuments) -> IndexCapacity {
    self.documents = Some(documents);
    self
  }

  pub fn documents(&self) -> Option<&::models::EnvironmentDocuments> {
    self.documents.as_ref()
  }

  pub fn reset_documents(&mut self) {
    self.documents = None;
  }

  pub fn set_disk_usage(&mut self, disk_usage: ::models::DiskUsage) {
    self.disk_usage = Some(disk_usage);
  }

  pub fn with_disk_usage(mut self, disk_usage: ::models::DiskUsage) -> IndexCapacity {
    self.disk_usage = Some(disk_usage);
    self
  }

  pub fn disk_usage(&self) -> Option<&::models::DiskUsage> {
    self.disk_usage.as_ref()
  }

  pub fn reset_disk_usage(&mut self) {
    self.disk_usage = None;
  }

  pub fn set_collections(&mut self, collections: ::models::CollectionUsage) {
    self.collections = Some(collections);
  }

  pub fn with_collections(mut self, collections: ::models::CollectionUsage) -> IndexCapacity {
    self.collections = Some(collections);
    self
  }

  pub fn collections(&self) -> Option<&::models::CollectionUsage> {
    self.collections.as_ref()
  }

  pub fn reset_collections(&mut self) {
    self.collections = None;
  }

  pub fn set_memory_usage(&mut self, memory_usage: ::models::MemoryUsage) {
    self.memory_usage = Some(memory_usage);
  }

  pub fn with_memory_usage(mut self, memory_usage: ::models::MemoryUsage) -> IndexCapacity {
    self.memory_usage = Some(memory_usage);
    self
  }

  pub fn memory_usage(&self) -> Option<&::models::MemoryUsage> {
    self.memory_usage.as_ref()
  }

  pub fn reset_memory_usage(&mut self) {
    self.memory_usage = None;
  }

}



