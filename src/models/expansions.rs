/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Expansions : The query expansion definitions for the specified collection.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Expansions {
  /// An array of query expansion definitions.    Each object in the **expansions** array represents a term or set of terms that will be expanded into other terms. Each expansion object can be configured as bidirectional or unidirectional. Bidirectional means that all terms are expanded to all other terms in the object. Unidirectional means that a set list of terms can be expanded into a second list of terms.   To create a bi-directional expansion specify an **expanded_terms** array. When found in a query, all items in the **expanded_terms** array are then expanded to the other items in the same array.   To create a uni-directional expansion, specify both an array of **input_terms** and an array of **expanded_terms**. When items in the **input_terms** array are present in a query, they are expanded using the items listed in the **expanded_terms** array.  
  #[serde(rename = "expansions")]
  expansions: Vec<::models::Expansion>
}

impl Expansions {
  /// The query expansion definitions for the specified collection.
  pub fn new(expansions: Vec<::models::Expansion>) -> Expansions {
    Expansions {
      expansions: expansions
    }
  }

  pub fn set_expansions(&mut self, expansions: Vec<::models::Expansion>) {
    self.expansions = expansions;
  }

  pub fn with_expansions(mut self, expansions: Vec<::models::Expansion>) -> Expansions {
    self.expansions = expansions;
    self
  }

  pub fn expansions(&self) -> &Vec<::models::Expansion> {
    &self.expansions
  }


}



