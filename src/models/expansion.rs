/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Expansion : An expansion definition. Each object respresents one set of expandable strings. For example, you could have expansions for the word `hot` in one object, and expansions for the word `cold` in another.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Expansion {
  /// A list of terms that will be expanded for this expansion. If specified, only the items in this list are expanded.
  #[serde(rename = "input_terms")]
  input_terms: Option<Vec<String>>,
  /// A list of terms that this expansion will be expanded to. If specified without **input_terms**, it also functions as the input term list.
  #[serde(rename = "expanded_terms")]
  expanded_terms: Vec<String>
}

impl Expansion {
  /// An expansion definition. Each object respresents one set of expandable strings. For example, you could have expansions for the word `hot` in one object, and expansions for the word `cold` in another.
  pub fn new(expanded_terms: Vec<String>) -> Expansion {
    Expansion {
      input_terms: None,
      expanded_terms: expanded_terms
    }
  }

  pub fn set_input_terms(&mut self, input_terms: Vec<String>) {
    self.input_terms = Some(input_terms);
  }

  pub fn with_input_terms(mut self, input_terms: Vec<String>) -> Expansion {
    self.input_terms = Some(input_terms);
    self
  }

  pub fn input_terms(&self) -> Option<&Vec<String>> {
    self.input_terms.as_ref()
  }

  pub fn reset_input_terms(&mut self) {
    self.input_terms = None;
  }

  pub fn set_expanded_terms(&mut self, expanded_terms: Vec<String>) {
    self.expanded_terms = expanded_terms;
  }

  pub fn with_expanded_terms(mut self, expanded_terms: Vec<String>) -> Expansion {
    self.expanded_terms = expanded_terms;
    self
  }

  pub fn expanded_terms(&self) -> &Vec<String> {
    &self.expanded_terms
  }


}



