/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// CredentialDetails : Object containing details of the stored credentials.   Obtain credentials for your source from the administrator of the source.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CredentialDetails {
  /// The authentication method for this credentials definition. The  **credential_type** specified must be supported by the **source_type**. The following combinations are possible:  -  `\"source_type\": \"box\"` - valid `credential_type`s: `oauth2` -  `\"source_type\": \"salesforce\"` - valid `credential_type`s: `username_password` -  `\"source_type\": \"sharepoint\"` - valid `credential_type`s: `saml` with **source_version** of `online`, or `ntml_v1` with **source_version** of `2016` -  `\"source_type\": \"web_crawl\"` - valid `credential_type`s: `noauth` or `basic`
  #[serde(rename = "credential_type")]
  credential_type: Option<String>,
  /// The **client_id** of the source that these credentials connect to. Only valid, and required, with a **credential_type** of `oauth2`.
  #[serde(rename = "client_id")]
  client_id: Option<String>,
  /// The **enterprise_id** of the Box site that these credentials connect to. Only valid, and required, with a **source_type** of `box`.
  #[serde(rename = "enterprise_id")]
  enterprise_id: Option<String>,
  /// The **url** of the source that these credentials connect to. Only valid, and required, with a **credential_type** of `username_password`, `noauth`, and `basic`.
  #[serde(rename = "url")]
  url: Option<String>,
  /// The **username** of the source that these credentials connect to. Only valid, and required, with a **credential_type** of `saml`, `username_password`, `basic`, or `ntml_v1`.
  #[serde(rename = "username")]
  username: Option<String>,
  /// The **organization_url** of the source that these credentials connect to. Only valid, and required, with a **credential_type** of `saml`.
  #[serde(rename = "organization_url")]
  organization_url: Option<String>,
  /// The **site_collection.path** of the source that these credentials connect to. Only valid, and required, with a **source_type** of `sharepoint`.
  #[serde(rename = "site_collection.path")]
  site_collection_path: Option<String>,
  /// The **client_secret** of the source that these credentials connect to. Only valid, and required, with a **credential_type** of `oauth2`. This value is never returned and is only used when creating or modifying **credentials**.
  #[serde(rename = "client_secret")]
  client_secret: Option<String>,
  /// The **public_key_id** of the source that these credentials connect to. Only valid, and required, with a **credential_type** of `oauth2`. This value is never returned and is only used when creating or modifying **credentials**.
  #[serde(rename = "public_key_id")]
  public_key_id: Option<String>,
  /// The **private_key** of the source that these credentials connect to. Only valid, and required, with a **credential_type** of `oauth2`. This value is never returned and is only used when creating or modifying **credentials**.
  #[serde(rename = "private_key")]
  private_key: Option<String>,
  /// The **passphrase** of the source that these credentials connect to. Only valid, and required, with a **credential_type** of `oauth2`. This value is never returned and is only used when creating or modifying **credentials**.
  #[serde(rename = "passphrase")]
  passphrase: Option<String>,
  /// The **password** of the source that these credentials connect to. Only valid, and required, with **credential_type**s of `saml`, `username_password`, `basic`, or `ntml_v1`.   **Note:** When used with a **source_type** of `salesforce`, the password consists of the Salesforce password and a valid Salesforce security token concatenated. This value is never returned and is only used when creating or modifying **credentials**.
  #[serde(rename = "password")]
  password: Option<String>,
  /// The ID of the **gateway** to be connected through (when connecting to intranet sites). Only valid with a **credential_type** of `noauth`, `basic`, or `ntml_v1`. Gateways are created using the `/v1/environments/{environment_id}/gateways` methods.
  #[serde(rename = "gateway_id")]
  gateway_id: Option<String>,
  /// The type of Sharepoint repository to connect to. Only valid, and required, with a **source_type** of `sharepoint`.
  #[serde(rename = "source_version")]
  source_version: Option<String>,
  /// SharePoint OnPrem WebApplication URL. Only valid, and required, with a **source_version** of `2016`.
  #[serde(rename = "web_application_url")]
  web_application_url: Option<String>,
  /// The domain used to log in to your OnPrem SharePoint account. Only valid, and required, with a **source_version** of `2016`.
  #[serde(rename = "domain")]
  domain: Option<String>
}

impl CredentialDetails {
  /// Object containing details of the stored credentials.   Obtain credentials for your source from the administrator of the source.
  pub fn new() -> CredentialDetails {
    CredentialDetails {
      credential_type: None,
      client_id: None,
      enterprise_id: None,
      url: None,
      username: None,
      organization_url: None,
      site_collection_path: None,
      client_secret: None,
      public_key_id: None,
      private_key: None,
      passphrase: None,
      password: None,
      gateway_id: None,
      source_version: None,
      web_application_url: None,
      domain: None
    }
  }

  pub fn set_credential_type(&mut self, credential_type: String) {
    self.credential_type = Some(credential_type);
  }

  pub fn with_credential_type(mut self, credential_type: String) -> CredentialDetails {
    self.credential_type = Some(credential_type);
    self
  }

  pub fn credential_type(&self) -> Option<&String> {
    self.credential_type.as_ref()
  }

  pub fn reset_credential_type(&mut self) {
    self.credential_type = None;
  }

  pub fn set_client_id(&mut self, client_id: String) {
    self.client_id = Some(client_id);
  }

  pub fn with_client_id(mut self, client_id: String) -> CredentialDetails {
    self.client_id = Some(client_id);
    self
  }

  pub fn client_id(&self) -> Option<&String> {
    self.client_id.as_ref()
  }

  pub fn reset_client_id(&mut self) {
    self.client_id = None;
  }

  pub fn set_enterprise_id(&mut self, enterprise_id: String) {
    self.enterprise_id = Some(enterprise_id);
  }

  pub fn with_enterprise_id(mut self, enterprise_id: String) -> CredentialDetails {
    self.enterprise_id = Some(enterprise_id);
    self
  }

  pub fn enterprise_id(&self) -> Option<&String> {
    self.enterprise_id.as_ref()
  }

  pub fn reset_enterprise_id(&mut self) {
    self.enterprise_id = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> CredentialDetails {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

  pub fn set_username(&mut self, username: String) {
    self.username = Some(username);
  }

  pub fn with_username(mut self, username: String) -> CredentialDetails {
    self.username = Some(username);
    self
  }

  pub fn username(&self) -> Option<&String> {
    self.username.as_ref()
  }

  pub fn reset_username(&mut self) {
    self.username = None;
  }

  pub fn set_organization_url(&mut self, organization_url: String) {
    self.organization_url = Some(organization_url);
  }

  pub fn with_organization_url(mut self, organization_url: String) -> CredentialDetails {
    self.organization_url = Some(organization_url);
    self
  }

  pub fn organization_url(&self) -> Option<&String> {
    self.organization_url.as_ref()
  }

  pub fn reset_organization_url(&mut self) {
    self.organization_url = None;
  }

  pub fn set_site_collection_path(&mut self, site_collection_path: String) {
    self.site_collection_path = Some(site_collection_path);
  }

  pub fn with_site_collection_path(mut self, site_collection_path: String) -> CredentialDetails {
    self.site_collection_path = Some(site_collection_path);
    self
  }

  pub fn site_collection_path(&self) -> Option<&String> {
    self.site_collection_path.as_ref()
  }

  pub fn reset_site_collection_path(&mut self) {
    self.site_collection_path = None;
  }

  pub fn set_client_secret(&mut self, client_secret: String) {
    self.client_secret = Some(client_secret);
  }

  pub fn with_client_secret(mut self, client_secret: String) -> CredentialDetails {
    self.client_secret = Some(client_secret);
    self
  }

  pub fn client_secret(&self) -> Option<&String> {
    self.client_secret.as_ref()
  }

  pub fn reset_client_secret(&mut self) {
    self.client_secret = None;
  }

  pub fn set_public_key_id(&mut self, public_key_id: String) {
    self.public_key_id = Some(public_key_id);
  }

  pub fn with_public_key_id(mut self, public_key_id: String) -> CredentialDetails {
    self.public_key_id = Some(public_key_id);
    self
  }

  pub fn public_key_id(&self) -> Option<&String> {
    self.public_key_id.as_ref()
  }

  pub fn reset_public_key_id(&mut self) {
    self.public_key_id = None;
  }

  pub fn set_private_key(&mut self, private_key: String) {
    self.private_key = Some(private_key);
  }

  pub fn with_private_key(mut self, private_key: String) -> CredentialDetails {
    self.private_key = Some(private_key);
    self
  }

  pub fn private_key(&self) -> Option<&String> {
    self.private_key.as_ref()
  }

  pub fn reset_private_key(&mut self) {
    self.private_key = None;
  }

  pub fn set_passphrase(&mut self, passphrase: String) {
    self.passphrase = Some(passphrase);
  }

  pub fn with_passphrase(mut self, passphrase: String) -> CredentialDetails {
    self.passphrase = Some(passphrase);
    self
  }

  pub fn passphrase(&self) -> Option<&String> {
    self.passphrase.as_ref()
  }

  pub fn reset_passphrase(&mut self) {
    self.passphrase = None;
  }

  pub fn set_password(&mut self, password: String) {
    self.password = Some(password);
  }

  pub fn with_password(mut self, password: String) -> CredentialDetails {
    self.password = Some(password);
    self
  }

  pub fn password(&self) -> Option<&String> {
    self.password.as_ref()
  }

  pub fn reset_password(&mut self) {
    self.password = None;
  }

  pub fn set_gateway_id(&mut self, gateway_id: String) {
    self.gateway_id = Some(gateway_id);
  }

  pub fn with_gateway_id(mut self, gateway_id: String) -> CredentialDetails {
    self.gateway_id = Some(gateway_id);
    self
  }

  pub fn gateway_id(&self) -> Option<&String> {
    self.gateway_id.as_ref()
  }

  pub fn reset_gateway_id(&mut self) {
    self.gateway_id = None;
  }

  pub fn set_source_version(&mut self, source_version: String) {
    self.source_version = Some(source_version);
  }

  pub fn with_source_version(mut self, source_version: String) -> CredentialDetails {
    self.source_version = Some(source_version);
    self
  }

  pub fn source_version(&self) -> Option<&String> {
    self.source_version.as_ref()
  }

  pub fn reset_source_version(&mut self) {
    self.source_version = None;
  }

  pub fn set_web_application_url(&mut self, web_application_url: String) {
    self.web_application_url = Some(web_application_url);
  }

  pub fn with_web_application_url(mut self, web_application_url: String) -> CredentialDetails {
    self.web_application_url = Some(web_application_url);
    self
  }

  pub fn web_application_url(&self) -> Option<&String> {
    self.web_application_url.as_ref()
  }

  pub fn reset_web_application_url(&mut self) {
    self.web_application_url = None;
  }

  pub fn set_domain(&mut self, domain: String) {
    self.domain = Some(domain);
  }

  pub fn with_domain(mut self, domain: String) -> CredentialDetails {
    self.domain = Some(domain);
    self
  }

  pub fn domain(&self) -> Option<&String> {
    self.domain.as_ref()
  }

  pub fn reset_domain(&mut self) {
    self.domain = None;
  }

}



