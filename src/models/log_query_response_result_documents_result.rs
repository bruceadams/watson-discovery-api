/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// LogQueryResponseResultDocumentsResult : Each object in the **results** array corresponds to an individual document returned by the original query.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct LogQueryResponseResultDocumentsResult {
  /// The result rank of this document. A position of `1` indicates that it was the first returned result.
  #[serde(rename = "position")]
  position: Option<i32>,
  /// The **document_id** of the document that this result represents
  #[serde(rename = "document_id")]
  document_id: Option<String>,
  /// The raw score of this result. A higher score indicates a greater match to the query parameters.
  #[serde(rename = "score")]
  score: Option<f64>,
  /// The confidence score of the result's analysis. A higher score indicating greater confidence.
  #[serde(rename = "confidence")]
  confidence: Option<f64>,
  /// The **collection_id** of the document represented by this result.
  #[serde(rename = "collection_id")]
  collection_id: Option<String>
}

impl LogQueryResponseResultDocumentsResult {
  /// Each object in the **results** array corresponds to an individual document returned by the original query.
  pub fn new() -> LogQueryResponseResultDocumentsResult {
    LogQueryResponseResultDocumentsResult {
      position: None,
      document_id: None,
      score: None,
      confidence: None,
      collection_id: None
    }
  }

  pub fn set_position(&mut self, position: i32) {
    self.position = Some(position);
  }

  pub fn with_position(mut self, position: i32) -> LogQueryResponseResultDocumentsResult {
    self.position = Some(position);
    self
  }

  pub fn position(&self) -> Option<&i32> {
    self.position.as_ref()
  }

  pub fn reset_position(&mut self) {
    self.position = None;
  }

  pub fn set_document_id(&mut self, document_id: String) {
    self.document_id = Some(document_id);
  }

  pub fn with_document_id(mut self, document_id: String) -> LogQueryResponseResultDocumentsResult {
    self.document_id = Some(document_id);
    self
  }

  pub fn document_id(&self) -> Option<&String> {
    self.document_id.as_ref()
  }

  pub fn reset_document_id(&mut self) {
    self.document_id = None;
  }

  pub fn set_score(&mut self, score: f64) {
    self.score = Some(score);
  }

  pub fn with_score(mut self, score: f64) -> LogQueryResponseResultDocumentsResult {
    self.score = Some(score);
    self
  }

  pub fn score(&self) -> Option<&f64> {
    self.score.as_ref()
  }

  pub fn reset_score(&mut self) {
    self.score = None;
  }

  pub fn set_confidence(&mut self, confidence: f64) {
    self.confidence = Some(confidence);
  }

  pub fn with_confidence(mut self, confidence: f64) -> LogQueryResponseResultDocumentsResult {
    self.confidence = Some(confidence);
    self
  }

  pub fn confidence(&self) -> Option<&f64> {
    self.confidence.as_ref()
  }

  pub fn reset_confidence(&mut self) {
    self.confidence = None;
  }

  pub fn set_collection_id(&mut self, collection_id: String) {
    self.collection_id = Some(collection_id);
  }

  pub fn with_collection_id(mut self, collection_id: String) -> LogQueryResponseResultDocumentsResult {
    self.collection_id = Some(collection_id);
    self
  }

  pub fn collection_id(&self) -> Option<&String> {
    self.collection_id.as_ref()
  }

  pub fn reset_collection_id(&mut self) {
    self.collection_id = None;
  }

}



