/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// LogQueryResponseResult : Individual result object for a **logs** query. Each object represents either a query to a Discovery collection or an event that is associated with a query.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct LogQueryResponseResult {
  /// The environment ID that is associated with this log entry.
  #[serde(rename = "environment_id")]
  environment_id: Option<String>,
  /// The **customer_id** label that was specified in the header of the query or event API call that corresponds to this log entry.
  #[serde(rename = "customer_id")]
  customer_id: Option<String>,
  /// The type of log entry returned.   **query** indicates that the log represents the results of a call to the single collection **query** method.   **event** indicates that the log represents  a call to the **events** API.
  #[serde(rename = "document_type")]
  document_type: Option<String>,
  /// The value of the **natural_language_query** query parameter that was used to create these results. Only returned with logs of type **query**.  **Note:** Other query parameters (such as **filter** or **deduplicate**) might  have been used with this query, but are not recorded.
  #[serde(rename = "natural_language_query")]
  natural_language_query: Option<String>,
  #[serde(rename = "document_results")]
  document_results: Option<::models::LogQueryResponseResultDocuments>,
  /// Date that the log result was created. Returned in `YYYY-MM-DDThh:mm:ssZ` format.
  #[serde(rename = "created_timestamp")]
  created_timestamp: Option<String>,
  /// Date specified by the user when recording an event. Returned in `YYYY-MM-DDThh:mm:ssZ` format. Only returned with logs of type **event**.
  #[serde(rename = "client_timestamp")]
  client_timestamp: Option<String>,
  /// Identifier that corresponds to the **natural_language_query** string used in the original or associated query. All **event** and **query** log entries that have the same original **natural_language_query** string also have them same **query_id**. This field can be used to recall all **event** and **query** log results that have the same original query (**event** logs do not contain the original **natural_language_query** field).
  #[serde(rename = "query_id")]
  query_id: Option<String>,
  /// Unique identifier (within a 24-hour period) that identifies a single `query` log and any `event` logs that were created for it.  **Note:** If the exact same query is run at the exact same time on different days, the **session_token** for those queries might be identical. However, the **created_timestamp** differs.   **Note:** Session tokens are case sensitive. To avoid matching on session tokens that are identical except for case, use the exact match operator (`::`) when you query for a specific session token.
  #[serde(rename = "session_token")]
  session_token: Option<String>,
  /// The collection ID of the document associated with this event. Only returned with logs of type `event`.
  #[serde(rename = "collection_id")]
  collection_id: Option<String>,
  /// The original display rank of the document associated with this event. Only returned with logs of type `event`.
  #[serde(rename = "display_rank")]
  display_rank: Option<i32>,
  /// The document ID of the document associated with this event. Only returned with logs of type `event`.
  #[serde(rename = "document_id")]
  document_id: Option<String>,
  /// The type of event that this object respresents. Possible values are   -  `query` the log of a query to a collection   -  `click` the result of a call to the **events** endpoint.
  #[serde(rename = "event_type")]
  event_type: Option<String>,
  /// The type of result that this **event** is associated with. Only returned with logs of type `event`.
  #[serde(rename = "result_type")]
  result_type: Option<String>
}

impl LogQueryResponseResult {
  /// Individual result object for a **logs** query. Each object represents either a query to a Discovery collection or an event that is associated with a query.
  pub fn new() -> LogQueryResponseResult {
    LogQueryResponseResult {
      environment_id: None,
      customer_id: None,
      document_type: None,
      natural_language_query: None,
      document_results: None,
      created_timestamp: None,
      client_timestamp: None,
      query_id: None,
      session_token: None,
      collection_id: None,
      display_rank: None,
      document_id: None,
      event_type: None,
      result_type: None
    }
  }

  pub fn set_environment_id(&mut self, environment_id: String) {
    self.environment_id = Some(environment_id);
  }

  pub fn with_environment_id(mut self, environment_id: String) -> LogQueryResponseResult {
    self.environment_id = Some(environment_id);
    self
  }

  pub fn environment_id(&self) -> Option<&String> {
    self.environment_id.as_ref()
  }

  pub fn reset_environment_id(&mut self) {
    self.environment_id = None;
  }

  pub fn set_customer_id(&mut self, customer_id: String) {
    self.customer_id = Some(customer_id);
  }

  pub fn with_customer_id(mut self, customer_id: String) -> LogQueryResponseResult {
    self.customer_id = Some(customer_id);
    self
  }

  pub fn customer_id(&self) -> Option<&String> {
    self.customer_id.as_ref()
  }

  pub fn reset_customer_id(&mut self) {
    self.customer_id = None;
  }

  pub fn set_document_type(&mut self, document_type: String) {
    self.document_type = Some(document_type);
  }

  pub fn with_document_type(mut self, document_type: String) -> LogQueryResponseResult {
    self.document_type = Some(document_type);
    self
  }

  pub fn document_type(&self) -> Option<&String> {
    self.document_type.as_ref()
  }

  pub fn reset_document_type(&mut self) {
    self.document_type = None;
  }

  pub fn set_natural_language_query(&mut self, natural_language_query: String) {
    self.natural_language_query = Some(natural_language_query);
  }

  pub fn with_natural_language_query(mut self, natural_language_query: String) -> LogQueryResponseResult {
    self.natural_language_query = Some(natural_language_query);
    self
  }

  pub fn natural_language_query(&self) -> Option<&String> {
    self.natural_language_query.as_ref()
  }

  pub fn reset_natural_language_query(&mut self) {
    self.natural_language_query = None;
  }

  pub fn set_document_results(&mut self, document_results: ::models::LogQueryResponseResultDocuments) {
    self.document_results = Some(document_results);
  }

  pub fn with_document_results(mut self, document_results: ::models::LogQueryResponseResultDocuments) -> LogQueryResponseResult {
    self.document_results = Some(document_results);
    self
  }

  pub fn document_results(&self) -> Option<&::models::LogQueryResponseResultDocuments> {
    self.document_results.as_ref()
  }

  pub fn reset_document_results(&mut self) {
    self.document_results = None;
  }

  pub fn set_created_timestamp(&mut self, created_timestamp: String) {
    self.created_timestamp = Some(created_timestamp);
  }

  pub fn with_created_timestamp(mut self, created_timestamp: String) -> LogQueryResponseResult {
    self.created_timestamp = Some(created_timestamp);
    self
  }

  pub fn created_timestamp(&self) -> Option<&String> {
    self.created_timestamp.as_ref()
  }

  pub fn reset_created_timestamp(&mut self) {
    self.created_timestamp = None;
  }

  pub fn set_client_timestamp(&mut self, client_timestamp: String) {
    self.client_timestamp = Some(client_timestamp);
  }

  pub fn with_client_timestamp(mut self, client_timestamp: String) -> LogQueryResponseResult {
    self.client_timestamp = Some(client_timestamp);
    self
  }

  pub fn client_timestamp(&self) -> Option<&String> {
    self.client_timestamp.as_ref()
  }

  pub fn reset_client_timestamp(&mut self) {
    self.client_timestamp = None;
  }

  pub fn set_query_id(&mut self, query_id: String) {
    self.query_id = Some(query_id);
  }

  pub fn with_query_id(mut self, query_id: String) -> LogQueryResponseResult {
    self.query_id = Some(query_id);
    self
  }

  pub fn query_id(&self) -> Option<&String> {
    self.query_id.as_ref()
  }

  pub fn reset_query_id(&mut self) {
    self.query_id = None;
  }

  pub fn set_session_token(&mut self, session_token: String) {
    self.session_token = Some(session_token);
  }

  pub fn with_session_token(mut self, session_token: String) -> LogQueryResponseResult {
    self.session_token = Some(session_token);
    self
  }

  pub fn session_token(&self) -> Option<&String> {
    self.session_token.as_ref()
  }

  pub fn reset_session_token(&mut self) {
    self.session_token = None;
  }

  pub fn set_collection_id(&mut self, collection_id: String) {
    self.collection_id = Some(collection_id);
  }

  pub fn with_collection_id(mut self, collection_id: String) -> LogQueryResponseResult {
    self.collection_id = Some(collection_id);
    self
  }

  pub fn collection_id(&self) -> Option<&String> {
    self.collection_id.as_ref()
  }

  pub fn reset_collection_id(&mut self) {
    self.collection_id = None;
  }

  pub fn set_display_rank(&mut self, display_rank: i32) {
    self.display_rank = Some(display_rank);
  }

  pub fn with_display_rank(mut self, display_rank: i32) -> LogQueryResponseResult {
    self.display_rank = Some(display_rank);
    self
  }

  pub fn display_rank(&self) -> Option<&i32> {
    self.display_rank.as_ref()
  }

  pub fn reset_display_rank(&mut self) {
    self.display_rank = None;
  }

  pub fn set_document_id(&mut self, document_id: String) {
    self.document_id = Some(document_id);
  }

  pub fn with_document_id(mut self, document_id: String) -> LogQueryResponseResult {
    self.document_id = Some(document_id);
    self
  }

  pub fn document_id(&self) -> Option<&String> {
    self.document_id.as_ref()
  }

  pub fn reset_document_id(&mut self) {
    self.document_id = None;
  }

  pub fn set_event_type(&mut self, event_type: String) {
    self.event_type = Some(event_type);
  }

  pub fn with_event_type(mut self, event_type: String) -> LogQueryResponseResult {
    self.event_type = Some(event_type);
    self
  }

  pub fn event_type(&self) -> Option<&String> {
    self.event_type.as_ref()
  }

  pub fn reset_event_type(&mut self) {
    self.event_type = None;
  }

  pub fn set_result_type(&mut self, result_type: String) {
    self.result_type = Some(result_type);
  }

  pub fn with_result_type(mut self, result_type: String) -> LogQueryResponseResult {
    self.result_type = Some(result_type);
    self
  }

  pub fn result_type(&self) -> Option<&String> {
    self.result_type.as_ref()
  }

  pub fn reset_result_type(&mut self) {
    self.result_type = None;
  }

}



