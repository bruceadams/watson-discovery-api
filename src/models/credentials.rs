/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Credentials : Object containing credential information.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Credentials {
  /// Unique identifier for this set of credentials.
  #[serde(rename = "credential_id")]
  credential_id: Option<String>,
  /// The source that this credentials object connects to. -  `box` indicates the credentials are used to connect an instance of Enterprise Box. -  `salesforce` indicates the credentials are used to connect to Salesforce. -  `sharepoint` indicates the credentials are used to connect to Microsoft SharePoint Online. -  `web_crawl` indicates the credentials are used to perform a web crawl.
  #[serde(rename = "source_type")]
  source_type: Option<String>,
  #[serde(rename = "credential_details")]
  credential_details: Option<::models::CredentialDetails>
}

impl Credentials {
  /// Object containing credential information.
  pub fn new() -> Credentials {
    Credentials {
      credential_id: None,
      source_type: None,
      credential_details: None
    }
  }

  pub fn set_credential_id(&mut self, credential_id: String) {
    self.credential_id = Some(credential_id);
  }

  pub fn with_credential_id(mut self, credential_id: String) -> Credentials {
    self.credential_id = Some(credential_id);
    self
  }

  pub fn credential_id(&self) -> Option<&String> {
    self.credential_id.as_ref()
  }

  pub fn reset_credential_id(&mut self) {
    self.credential_id = None;
  }

  pub fn set_source_type(&mut self, source_type: String) {
    self.source_type = Some(source_type);
  }

  pub fn with_source_type(mut self, source_type: String) -> Credentials {
    self.source_type = Some(source_type);
    self
  }

  pub fn source_type(&self) -> Option<&String> {
    self.source_type.as_ref()
  }

  pub fn reset_source_type(&mut self) {
    self.source_type = None;
  }

  pub fn set_credential_details(&mut self, credential_details: ::models::CredentialDetails) {
    self.credential_details = Some(credential_details);
  }

  pub fn with_credential_details(mut self, credential_details: ::models::CredentialDetails) -> Credentials {
    self.credential_details = Some(credential_details);
    self
  }

  pub fn credential_details(&self) -> Option<&::models::CredentialDetails> {
    self.credential_details.as_ref()
  }

  pub fn reset_credential_details(&mut self) {
    self.credential_details = None;
  }

}



