/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NormalizationOperation {
  /// Identifies what type of operation to perform.   **copy** - Copies the value of the **source_field** to the **destination_field** field. If the **destination_field** already exists, then the value of the **source_field** overwrites the original value of the **destination_field**.   **move** - Renames (moves) the **source_field** to the **destination_field**. If the **destination_field** already exists, then the value of the **source_field** overwrites the original value of the **destination_field**. Rename is identical to copy, except that the **source_field** is removed after the value has been copied to the **destination_field** (it is the same as a _copy_ followed by a _remove_).   **merge** - Merges the value of the **source_field** with the value of the **destination_field**. The **destination_field** is converted into an array if it is not already an array, and the value of the **source_field** is appended to the array. This operation removes the **source_field** after the merge. If the **source_field** does not exist in the current document, then the **destination_field** is still converted into an array (if it is not an array already). This conversion ensures the type for **destination_field** is consistent across all documents.   **remove** - Deletes the **source_field** field. The **destination_field** is ignored for this operation.   **remove_nulls** - Removes all nested null (blank) field values from the JSON tree. **source_field** and **destination_field** are ignored by this operation because _remove_nulls_ operates on the entire JSON tree. Typically, **remove_nulls** is invoked as the last normalization operation (if it is invoked at all, it can be time-expensive).
  #[serde(rename = "operation")]
  operation: Option<String>,
  /// The source field for the operation.
  #[serde(rename = "source_field")]
  source_field: Option<String>,
  /// The destination field for the operation.
  #[serde(rename = "destination_field")]
  destination_field: Option<String>
}

impl NormalizationOperation {
  pub fn new() -> NormalizationOperation {
    NormalizationOperation {
      operation: None,
      source_field: None,
      destination_field: None
    }
  }

  pub fn set_operation(&mut self, operation: String) {
    self.operation = Some(operation);
  }

  pub fn with_operation(mut self, operation: String) -> NormalizationOperation {
    self.operation = Some(operation);
    self
  }

  pub fn operation(&self) -> Option<&String> {
    self.operation.as_ref()
  }

  pub fn reset_operation(&mut self) {
    self.operation = None;
  }

  pub fn set_source_field(&mut self, source_field: String) {
    self.source_field = Some(source_field);
  }

  pub fn with_source_field(mut self, source_field: String) -> NormalizationOperation {
    self.source_field = Some(source_field);
    self
  }

  pub fn source_field(&self) -> Option<&String> {
    self.source_field.as_ref()
  }

  pub fn reset_source_field(&mut self) {
    self.source_field = None;
  }

  pub fn set_destination_field(&mut self, destination_field: String) {
    self.destination_field = Some(destination_field);
  }

  pub fn with_destination_field(mut self, destination_field: String) -> NormalizationOperation {
    self.destination_field = Some(destination_field);
    self
  }

  pub fn destination_field(&self) -> Option<&String> {
    self.destination_field.as_ref()
  }

  pub fn reset_destination_field(&mut self) {
    self.destination_field = None;
  }

}



