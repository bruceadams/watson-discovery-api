/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ListCollectionFieldsResponse : The list of fetched fields.  The fields are returned using a fully qualified name format, however, the format differs slightly from that used by the query operations.    * Fields which contain nested JSON objects are assigned a type of \"nested\".    * Fields which belong to a nested object are prefixed with `.properties` (for example, `warnings.properties.severity` means that the `warnings` object has a property called `severity`).    * Fields returned from the News collection are prefixed with `v{N}-fullnews-t3-{YEAR}.mappings` (for example, `v5-fullnews-t3-2016.mappings.text.properties.author`).

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ListCollectionFieldsResponse {
  /// An array containing information about each field in the collections.
  #[serde(rename = "fields")]
  fields: Option<Vec<::models::Field>>
}

impl ListCollectionFieldsResponse {
  /// The list of fetched fields.  The fields are returned using a fully qualified name format, however, the format differs slightly from that used by the query operations.    * Fields which contain nested JSON objects are assigned a type of \"nested\".    * Fields which belong to a nested object are prefixed with `.properties` (for example, `warnings.properties.severity` means that the `warnings` object has a property called `severity`).    * Fields returned from the News collection are prefixed with `v{N}-fullnews-t3-{YEAR}.mappings` (for example, `v5-fullnews-t3-2016.mappings.text.properties.author`).
  pub fn new() -> ListCollectionFieldsResponse {
    ListCollectionFieldsResponse {
      fields: None
    }
  }

  pub fn set_fields(&mut self, fields: Vec<::models::Field>) {
    self.fields = Some(fields);
  }

  pub fn with_fields(mut self, fields: Vec<::models::Field>) -> ListCollectionFieldsResponse {
    self.fields = Some(fields);
    self
  }

  pub fn fields(&self) -> Option<&Vec<::models::Field>> {
    self.fields.as_ref()
  }

  pub fn reset_fields(&mut self) {
    self.fields = None;
  }

}



