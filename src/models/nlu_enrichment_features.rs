/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NluEnrichmentFeatures {
  #[serde(rename = "keywords")]
  keywords: Option<::models::NluEnrichmentKeywords>,
  #[serde(rename = "entities")]
  entities: Option<::models::NluEnrichmentEntities>,
  #[serde(rename = "sentiment")]
  sentiment: Option<::models::NluEnrichmentSentiment>,
  #[serde(rename = "emotion")]
  emotion: Option<::models::NluEnrichmentEmotion>,
  #[serde(rename = "categories")]
  categories: Option<::models::NluEnrichmentCategories>,
  #[serde(rename = "semantic_roles")]
  semantic_roles: Option<::models::NluEnrichmentSemanticRoles>,
  #[serde(rename = "relations")]
  relations: Option<::models::NluEnrichmentRelations>,
  #[serde(rename = "concepts")]
  concepts: Option<::models::NluEnrichmentConcepts>
}

impl NluEnrichmentFeatures {
  pub fn new() -> NluEnrichmentFeatures {
    NluEnrichmentFeatures {
      keywords: None,
      entities: None,
      sentiment: None,
      emotion: None,
      categories: None,
      semantic_roles: None,
      relations: None,
      concepts: None
    }
  }

  pub fn set_keywords(&mut self, keywords: ::models::NluEnrichmentKeywords) {
    self.keywords = Some(keywords);
  }

  pub fn with_keywords(mut self, keywords: ::models::NluEnrichmentKeywords) -> NluEnrichmentFeatures {
    self.keywords = Some(keywords);
    self
  }

  pub fn keywords(&self) -> Option<&::models::NluEnrichmentKeywords> {
    self.keywords.as_ref()
  }

  pub fn reset_keywords(&mut self) {
    self.keywords = None;
  }

  pub fn set_entities(&mut self, entities: ::models::NluEnrichmentEntities) {
    self.entities = Some(entities);
  }

  pub fn with_entities(mut self, entities: ::models::NluEnrichmentEntities) -> NluEnrichmentFeatures {
    self.entities = Some(entities);
    self
  }

  pub fn entities(&self) -> Option<&::models::NluEnrichmentEntities> {
    self.entities.as_ref()
  }

  pub fn reset_entities(&mut self) {
    self.entities = None;
  }

  pub fn set_sentiment(&mut self, sentiment: ::models::NluEnrichmentSentiment) {
    self.sentiment = Some(sentiment);
  }

  pub fn with_sentiment(mut self, sentiment: ::models::NluEnrichmentSentiment) -> NluEnrichmentFeatures {
    self.sentiment = Some(sentiment);
    self
  }

  pub fn sentiment(&self) -> Option<&::models::NluEnrichmentSentiment> {
    self.sentiment.as_ref()
  }

  pub fn reset_sentiment(&mut self) {
    self.sentiment = None;
  }

  pub fn set_emotion(&mut self, emotion: ::models::NluEnrichmentEmotion) {
    self.emotion = Some(emotion);
  }

  pub fn with_emotion(mut self, emotion: ::models::NluEnrichmentEmotion) -> NluEnrichmentFeatures {
    self.emotion = Some(emotion);
    self
  }

  pub fn emotion(&self) -> Option<&::models::NluEnrichmentEmotion> {
    self.emotion.as_ref()
  }

  pub fn reset_emotion(&mut self) {
    self.emotion = None;
  }

  pub fn set_categories(&mut self, categories: ::models::NluEnrichmentCategories) {
    self.categories = Some(categories);
  }

  pub fn with_categories(mut self, categories: ::models::NluEnrichmentCategories) -> NluEnrichmentFeatures {
    self.categories = Some(categories);
    self
  }

  pub fn categories(&self) -> Option<&::models::NluEnrichmentCategories> {
    self.categories.as_ref()
  }

  pub fn reset_categories(&mut self) {
    self.categories = None;
  }

  pub fn set_semantic_roles(&mut self, semantic_roles: ::models::NluEnrichmentSemanticRoles) {
    self.semantic_roles = Some(semantic_roles);
  }

  pub fn with_semantic_roles(mut self, semantic_roles: ::models::NluEnrichmentSemanticRoles) -> NluEnrichmentFeatures {
    self.semantic_roles = Some(semantic_roles);
    self
  }

  pub fn semantic_roles(&self) -> Option<&::models::NluEnrichmentSemanticRoles> {
    self.semantic_roles.as_ref()
  }

  pub fn reset_semantic_roles(&mut self) {
    self.semantic_roles = None;
  }

  pub fn set_relations(&mut self, relations: ::models::NluEnrichmentRelations) {
    self.relations = Some(relations);
  }

  pub fn with_relations(mut self, relations: ::models::NluEnrichmentRelations) -> NluEnrichmentFeatures {
    self.relations = Some(relations);
    self
  }

  pub fn relations(&self) -> Option<&::models::NluEnrichmentRelations> {
    self.relations.as_ref()
  }

  pub fn reset_relations(&mut self) {
    self.relations = None;
  }

  pub fn set_concepts(&mut self, concepts: ::models::NluEnrichmentConcepts) {
    self.concepts = Some(concepts);
  }

  pub fn with_concepts(mut self, concepts: ::models::NluEnrichmentConcepts) -> NluEnrichmentFeatures {
    self.concepts = Some(concepts);
    self
  }

  pub fn concepts(&self) -> Option<&::models::NluEnrichmentConcepts> {
    self.concepts.as_ref()
  }

  pub fn reset_concepts(&mut self) {
    self.concepts = None;
  }

}



