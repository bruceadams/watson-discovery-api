/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// MetricAggregationResult : Aggregation result data for the requested metric.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MetricAggregationResult {
  /// Date in string form representing the start of this interval.
  #[serde(rename = "key_as_string")]
  key_as_string: Option<String>,
  /// Unix epoch time equivalent of the **key_as_string**, that represents the start of this interval
  #[serde(rename = "key")]
  key: Option<i64>,
  /// Number of matching results.
  #[serde(rename = "matching_results")]
  matching_results: Option<i32>,
  /// The number of queries with associated events divided by the total number of queries for the interval. Only returned with **event_rate** metrics.
  #[serde(rename = "event_rate")]
  event_rate: Option<f64>
}

impl MetricAggregationResult {
  /// Aggregation result data for the requested metric.
  pub fn new() -> MetricAggregationResult {
    MetricAggregationResult {
      key_as_string: None,
      key: None,
      matching_results: None,
      event_rate: None
    }
  }

  pub fn set_key_as_string(&mut self, key_as_string: String) {
    self.key_as_string = Some(key_as_string);
  }

  pub fn with_key_as_string(mut self, key_as_string: String) -> MetricAggregationResult {
    self.key_as_string = Some(key_as_string);
    self
  }

  pub fn key_as_string(&self) -> Option<&String> {
    self.key_as_string.as_ref()
  }

  pub fn reset_key_as_string(&mut self) {
    self.key_as_string = None;
  }

  pub fn set_key(&mut self, key: i64) {
    self.key = Some(key);
  }

  pub fn with_key(mut self, key: i64) -> MetricAggregationResult {
    self.key = Some(key);
    self
  }

  pub fn key(&self) -> Option<&i64> {
    self.key.as_ref()
  }

  pub fn reset_key(&mut self) {
    self.key = None;
  }

  pub fn set_matching_results(&mut self, matching_results: i32) {
    self.matching_results = Some(matching_results);
  }

  pub fn with_matching_results(mut self, matching_results: i32) -> MetricAggregationResult {
    self.matching_results = Some(matching_results);
    self
  }

  pub fn matching_results(&self) -> Option<&i32> {
    self.matching_results.as_ref()
  }

  pub fn reset_matching_results(&mut self) {
    self.matching_results = None;
  }

  pub fn set_event_rate(&mut self, event_rate: f64) {
    self.event_rate = Some(event_rate);
  }

  pub fn with_event_rate(mut self, event_rate: f64) -> MetricAggregationResult {
    self.event_rate = Some(event_rate);
    self
  }

  pub fn event_rate(&self) -> Option<&f64> {
    self.event_rate.as_ref()
  }

  pub fn reset_event_rate(&mut self) {
    self.event_rate = None;
  }

}



