/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Conversions : Document conversion settings.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Conversions {
  #[serde(rename = "pdf")]
  pdf: Option<::models::PdfSettings>,
  #[serde(rename = "word")]
  word: Option<::models::WordSettings>,
  #[serde(rename = "html")]
  html: Option<::models::HtmlSettings>,
  #[serde(rename = "segment")]
  segment: Option<::models::SegmentSettings>,
  /// Defines operations that can be used to transform the final output JSON into a normalized form. Operations are executed in the order that they appear in the array.
  #[serde(rename = "json_normalizations")]
  json_normalizations: Option<Vec<::models::NormalizationOperation>>
}

impl Conversions {
  /// Document conversion settings.
  pub fn new() -> Conversions {
    Conversions {
      pdf: None,
      word: None,
      html: None,
      segment: None,
      json_normalizations: None
    }
  }

  pub fn set_pdf(&mut self, pdf: ::models::PdfSettings) {
    self.pdf = Some(pdf);
  }

  pub fn with_pdf(mut self, pdf: ::models::PdfSettings) -> Conversions {
    self.pdf = Some(pdf);
    self
  }

  pub fn pdf(&self) -> Option<&::models::PdfSettings> {
    self.pdf.as_ref()
  }

  pub fn reset_pdf(&mut self) {
    self.pdf = None;
  }

  pub fn set_word(&mut self, word: ::models::WordSettings) {
    self.word = Some(word);
  }

  pub fn with_word(mut self, word: ::models::WordSettings) -> Conversions {
    self.word = Some(word);
    self
  }

  pub fn word(&self) -> Option<&::models::WordSettings> {
    self.word.as_ref()
  }

  pub fn reset_word(&mut self) {
    self.word = None;
  }

  pub fn set_html(&mut self, html: ::models::HtmlSettings) {
    self.html = Some(html);
  }

  pub fn with_html(mut self, html: ::models::HtmlSettings) -> Conversions {
    self.html = Some(html);
    self
  }

  pub fn html(&self) -> Option<&::models::HtmlSettings> {
    self.html.as_ref()
  }

  pub fn reset_html(&mut self) {
    self.html = None;
  }

  pub fn set_segment(&mut self, segment: ::models::SegmentSettings) {
    self.segment = Some(segment);
  }

  pub fn with_segment(mut self, segment: ::models::SegmentSettings) -> Conversions {
    self.segment = Some(segment);
    self
  }

  pub fn segment(&self) -> Option<&::models::SegmentSettings> {
    self.segment.as_ref()
  }

  pub fn reset_segment(&mut self) {
    self.segment = None;
  }

  pub fn set_json_normalizations(&mut self, json_normalizations: Vec<::models::NormalizationOperation>) {
    self.json_normalizations = Some(json_normalizations);
  }

  pub fn with_json_normalizations(mut self, json_normalizations: Vec<::models::NormalizationOperation>) -> Conversions {
    self.json_normalizations = Some(json_normalizations);
    self
  }

  pub fn json_normalizations(&self) -> Option<&Vec<::models::NormalizationOperation>> {
    self.json_normalizations.as_ref()
  }

  pub fn reset_json_normalizations(&mut self) {
    self.json_normalizations = None;
  }

}



