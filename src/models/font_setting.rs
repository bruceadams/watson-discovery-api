/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FontSetting {
  #[serde(rename = "level")]
  level: Option<i32>,
  #[serde(rename = "min_size")]
  min_size: Option<i32>,
  #[serde(rename = "max_size")]
  max_size: Option<i32>,
  #[serde(rename = "bold")]
  bold: Option<bool>,
  #[serde(rename = "italic")]
  italic: Option<bool>,
  #[serde(rename = "name")]
  name: Option<String>
}

impl FontSetting {
  pub fn new() -> FontSetting {
    FontSetting {
      level: None,
      min_size: None,
      max_size: None,
      bold: None,
      italic: None,
      name: None
    }
  }

  pub fn set_level(&mut self, level: i32) {
    self.level = Some(level);
  }

  pub fn with_level(mut self, level: i32) -> FontSetting {
    self.level = Some(level);
    self
  }

  pub fn level(&self) -> Option<&i32> {
    self.level.as_ref()
  }

  pub fn reset_level(&mut self) {
    self.level = None;
  }

  pub fn set_min_size(&mut self, min_size: i32) {
    self.min_size = Some(min_size);
  }

  pub fn with_min_size(mut self, min_size: i32) -> FontSetting {
    self.min_size = Some(min_size);
    self
  }

  pub fn min_size(&self) -> Option<&i32> {
    self.min_size.as_ref()
  }

  pub fn reset_min_size(&mut self) {
    self.min_size = None;
  }

  pub fn set_max_size(&mut self, max_size: i32) {
    self.max_size = Some(max_size);
  }

  pub fn with_max_size(mut self, max_size: i32) -> FontSetting {
    self.max_size = Some(max_size);
    self
  }

  pub fn max_size(&self) -> Option<&i32> {
    self.max_size.as_ref()
  }

  pub fn reset_max_size(&mut self) {
    self.max_size = None;
  }

  pub fn set_bold(&mut self, bold: bool) {
    self.bold = Some(bold);
  }

  pub fn with_bold(mut self, bold: bool) -> FontSetting {
    self.bold = Some(bold);
    self
  }

  pub fn bold(&self) -> Option<&bool> {
    self.bold.as_ref()
  }

  pub fn reset_bold(&mut self) {
    self.bold = None;
  }

  pub fn set_italic(&mut self, italic: bool) {
    self.italic = Some(italic);
  }

  pub fn with_italic(mut self, italic: bool) -> FontSetting {
    self.italic = Some(italic);
    self
  }

  pub fn italic(&self) -> Option<&bool> {
    self.italic.as_ref()
  }

  pub fn reset_italic(&mut self) {
    self.italic = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> FontSetting {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

}



