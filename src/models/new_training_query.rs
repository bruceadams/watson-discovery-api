/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NewTrainingQuery {
  #[serde(rename = "natural_language_query")]
  natural_language_query: Option<String>,
  #[serde(rename = "filter")]
  filter: Option<String>,
  #[serde(rename = "examples")]
  examples: Option<Vec<::models::TrainingExample>>
}

impl NewTrainingQuery {
  pub fn new() -> NewTrainingQuery {
    NewTrainingQuery {
      natural_language_query: None,
      filter: None,
      examples: None
    }
  }

  pub fn set_natural_language_query(&mut self, natural_language_query: String) {
    self.natural_language_query = Some(natural_language_query);
  }

  pub fn with_natural_language_query(mut self, natural_language_query: String) -> NewTrainingQuery {
    self.natural_language_query = Some(natural_language_query);
    self
  }

  pub fn natural_language_query(&self) -> Option<&String> {
    self.natural_language_query.as_ref()
  }

  pub fn reset_natural_language_query(&mut self) {
    self.natural_language_query = None;
  }

  pub fn set_filter(&mut self, filter: String) {
    self.filter = Some(filter);
  }

  pub fn with_filter(mut self, filter: String) -> NewTrainingQuery {
    self.filter = Some(filter);
    self
  }

  pub fn filter(&self) -> Option<&String> {
    self.filter.as_ref()
  }

  pub fn reset_filter(&mut self) {
    self.filter = None;
  }

  pub fn set_examples(&mut self, examples: Vec<::models::TrainingExample>) {
    self.examples = Some(examples);
  }

  pub fn with_examples(mut self, examples: Vec<::models::TrainingExample>) -> NewTrainingQuery {
    self.examples = Some(examples);
    self
  }

  pub fn examples(&self) -> Option<&Vec<::models::TrainingExample>> {
    self.examples.as_ref()
  }

  pub fn reset_examples(&mut self) {
    self.examples = None;
  }

}



