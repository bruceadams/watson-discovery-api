/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// HtmlSettings : A list of HTML conversion settings.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct HtmlSettings {
  #[serde(rename = "exclude_tags_completely")]
  exclude_tags_completely: Option<Vec<String>>,
  #[serde(rename = "exclude_tags_keep_content")]
  exclude_tags_keep_content: Option<Vec<String>>,
  #[serde(rename = "keep_content")]
  keep_content: Option<::models::XPathPatterns>,
  #[serde(rename = "exclude_content")]
  exclude_content: Option<::models::XPathPatterns>,
  #[serde(rename = "keep_tag_attributes")]
  keep_tag_attributes: Option<Vec<String>>,
  #[serde(rename = "exclude_tag_attributes")]
  exclude_tag_attributes: Option<Vec<String>>
}

impl HtmlSettings {
  /// A list of HTML conversion settings.
  pub fn new() -> HtmlSettings {
    HtmlSettings {
      exclude_tags_completely: None,
      exclude_tags_keep_content: None,
      keep_content: None,
      exclude_content: None,
      keep_tag_attributes: None,
      exclude_tag_attributes: None
    }
  }

  pub fn set_exclude_tags_completely(&mut self, exclude_tags_completely: Vec<String>) {
    self.exclude_tags_completely = Some(exclude_tags_completely);
  }

  pub fn with_exclude_tags_completely(mut self, exclude_tags_completely: Vec<String>) -> HtmlSettings {
    self.exclude_tags_completely = Some(exclude_tags_completely);
    self
  }

  pub fn exclude_tags_completely(&self) -> Option<&Vec<String>> {
    self.exclude_tags_completely.as_ref()
  }

  pub fn reset_exclude_tags_completely(&mut self) {
    self.exclude_tags_completely = None;
  }

  pub fn set_exclude_tags_keep_content(&mut self, exclude_tags_keep_content: Vec<String>) {
    self.exclude_tags_keep_content = Some(exclude_tags_keep_content);
  }

  pub fn with_exclude_tags_keep_content(mut self, exclude_tags_keep_content: Vec<String>) -> HtmlSettings {
    self.exclude_tags_keep_content = Some(exclude_tags_keep_content);
    self
  }

  pub fn exclude_tags_keep_content(&self) -> Option<&Vec<String>> {
    self.exclude_tags_keep_content.as_ref()
  }

  pub fn reset_exclude_tags_keep_content(&mut self) {
    self.exclude_tags_keep_content = None;
  }

  pub fn set_keep_content(&mut self, keep_content: ::models::XPathPatterns) {
    self.keep_content = Some(keep_content);
  }

  pub fn with_keep_content(mut self, keep_content: ::models::XPathPatterns) -> HtmlSettings {
    self.keep_content = Some(keep_content);
    self
  }

  pub fn keep_content(&self) -> Option<&::models::XPathPatterns> {
    self.keep_content.as_ref()
  }

  pub fn reset_keep_content(&mut self) {
    self.keep_content = None;
  }

  pub fn set_exclude_content(&mut self, exclude_content: ::models::XPathPatterns) {
    self.exclude_content = Some(exclude_content);
  }

  pub fn with_exclude_content(mut self, exclude_content: ::models::XPathPatterns) -> HtmlSettings {
    self.exclude_content = Some(exclude_content);
    self
  }

  pub fn exclude_content(&self) -> Option<&::models::XPathPatterns> {
    self.exclude_content.as_ref()
  }

  pub fn reset_exclude_content(&mut self) {
    self.exclude_content = None;
  }

  pub fn set_keep_tag_attributes(&mut self, keep_tag_attributes: Vec<String>) {
    self.keep_tag_attributes = Some(keep_tag_attributes);
  }

  pub fn with_keep_tag_attributes(mut self, keep_tag_attributes: Vec<String>) -> HtmlSettings {
    self.keep_tag_attributes = Some(keep_tag_attributes);
    self
  }

  pub fn keep_tag_attributes(&self) -> Option<&Vec<String>> {
    self.keep_tag_attributes.as_ref()
  }

  pub fn reset_keep_tag_attributes(&mut self) {
    self.keep_tag_attributes = None;
  }

  pub fn set_exclude_tag_attributes(&mut self, exclude_tag_attributes: Vec<String>) {
    self.exclude_tag_attributes = Some(exclude_tag_attributes);
  }

  pub fn with_exclude_tag_attributes(mut self, exclude_tag_attributes: Vec<String>) -> HtmlSettings {
    self.exclude_tag_attributes = Some(exclude_tag_attributes);
    self
  }

  pub fn exclude_tag_attributes(&self) -> Option<&Vec<String>> {
    self.exclude_tag_attributes.as_ref()
  }

  pub fn reset_exclude_tag_attributes(&mut self) {
    self.exclude_tag_attributes = None;
  }

}



