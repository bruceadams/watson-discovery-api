/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Gateway : Object describing a specific gateway.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Gateway {
  /// The gateway ID of the gateway.
  #[serde(rename = "gateway_id")]
  gateway_id: Option<String>,
  /// The user defined name of the gateway.
  #[serde(rename = "name")]
  name: Option<String>,
  /// The current status of the gateway. `connected` means the gateway is connected to the remotly installed gateway. `idle` means this gateway is not currently in use.
  #[serde(rename = "status")]
  status: Option<String>,
  /// The generated **token** for this gateway. The value of this field is used when configuring the remotly installed gateway.
  #[serde(rename = "token")]
  token: Option<String>,
  /// The generated **token_id** for this gateway. The value of this field is used when configuring the remotly installed gateway.
  #[serde(rename = "token_id")]
  token_id: Option<String>
}

impl Gateway {
  /// Object describing a specific gateway.
  pub fn new() -> Gateway {
    Gateway {
      gateway_id: None,
      name: None,
      status: None,
      token: None,
      token_id: None
    }
  }

  pub fn set_gateway_id(&mut self, gateway_id: String) {
    self.gateway_id = Some(gateway_id);
  }

  pub fn with_gateway_id(mut self, gateway_id: String) -> Gateway {
    self.gateway_id = Some(gateway_id);
    self
  }

  pub fn gateway_id(&self) -> Option<&String> {
    self.gateway_id.as_ref()
  }

  pub fn reset_gateway_id(&mut self) {
    self.gateway_id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> Gateway {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> Gateway {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_token(&mut self, token: String) {
    self.token = Some(token);
  }

  pub fn with_token(mut self, token: String) -> Gateway {
    self.token = Some(token);
    self
  }

  pub fn token(&self) -> Option<&String> {
    self.token.as_ref()
  }

  pub fn reset_token(&mut self) {
    self.token = None;
  }

  pub fn set_token_id(&mut self, token_id: String) {
    self.token_id = Some(token_id);
  }

  pub fn with_token_id(mut self, token_id: String) -> Gateway {
    self.token_id = Some(token_id);
    self
  }

  pub fn token_id(&self) -> Option<&String> {
    self.token_id.as_ref()
  }

  pub fn reset_token_id(&mut self) {
    self.token_id = None;
  }

}



