/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct QueryRelationsRelationship {
  /// The identified relationship type
  #[serde(rename = "type")]
  type_: Option<String>,
  /// The number of times the relationship is mentioned.
  #[serde(rename = "frequency")]
  frequency: Option<i32>,
  /// Information about the relationship
  #[serde(rename = "arguments")]
  arguments: Option<Vec<::models::QueryRelationsArgument>>,
  /// List of different evidentiary items to support the result.
  #[serde(rename = "evidence")]
  evidence: Option<Vec<::models::QueryEvidence>>
}

impl QueryRelationsRelationship {
  pub fn new() -> QueryRelationsRelationship {
    QueryRelationsRelationship {
      type_: None,
      frequency: None,
      arguments: None,
      evidence: None
    }
  }

  pub fn set_type_(&mut self, type_: String) {
    self.type_ = Some(type_);
  }

  pub fn with_type_(mut self, type_: String) -> QueryRelationsRelationship {
    self.type_ = Some(type_);
    self
  }

  pub fn type_(&self) -> Option<&String> {
    self.type_.as_ref()
  }

  pub fn reset_type_(&mut self) {
    self.type_ = None;
  }

  pub fn set_frequency(&mut self, frequency: i32) {
    self.frequency = Some(frequency);
  }

  pub fn with_frequency(mut self, frequency: i32) -> QueryRelationsRelationship {
    self.frequency = Some(frequency);
    self
  }

  pub fn frequency(&self) -> Option<&i32> {
    self.frequency.as_ref()
  }

  pub fn reset_frequency(&mut self) {
    self.frequency = None;
  }

  pub fn set_arguments(&mut self, arguments: Vec<::models::QueryRelationsArgument>) {
    self.arguments = Some(arguments);
  }

  pub fn with_arguments(mut self, arguments: Vec<::models::QueryRelationsArgument>) -> QueryRelationsRelationship {
    self.arguments = Some(arguments);
    self
  }

  pub fn arguments(&self) -> Option<&Vec<::models::QueryRelationsArgument>> {
    self.arguments.as_ref()
  }

  pub fn reset_arguments(&mut self) {
    self.arguments = None;
  }

  pub fn set_evidence(&mut self, evidence: Vec<::models::QueryEvidence>) {
    self.evidence = Some(evidence);
  }

  pub fn with_evidence(mut self, evidence: Vec<::models::QueryEvidence>) -> QueryRelationsRelationship {
    self.evidence = Some(evidence);
    self
  }

  pub fn evidence(&self) -> Option<&Vec<::models::QueryEvidence>> {
    self.evidence.as_ref()
  }

  pub fn reset_evidence(&mut self) {
    self.evidence = None;
  }

}



