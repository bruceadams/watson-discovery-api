/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Configuration : A custom configuration for the environment.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Configuration {
  /// The unique identifier of the configuration
  #[serde(rename = "configuration_id")]
  configuration_id: Option<String>,
  /// The name of the configuration.
  #[serde(rename = "name")]
  name: String,
  /// The creation date of the configuration in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
  #[serde(rename = "created")]
  created: Option<String>,
  /// The timestamp of when the configuration was last updated in the format yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
  #[serde(rename = "updated")]
  updated: Option<String>,
  /// The description of the configuration, if available.
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "conversions")]
  conversions: Option<::models::Conversions>,
  /// An array of document enrichment settings for the configuration.
  #[serde(rename = "enrichments")]
  enrichments: Option<Vec<::models::Enrichment>>,
  /// Defines operations that can be used to transform the final output JSON into a normalized form. Operations are executed in the order that they appear in the array.
  #[serde(rename = "normalizations")]
  normalizations: Option<Vec<::models::NormalizationOperation>>,
  #[serde(rename = "source")]
  source: Option<::models::Source>
}

impl Configuration {
  /// A custom configuration for the environment.
  pub fn new(name: String) -> Configuration {
    Configuration {
      configuration_id: None,
      name: name,
      created: None,
      updated: None,
      description: None,
      conversions: None,
      enrichments: None,
      normalizations: None,
      source: None
    }
  }

  pub fn set_configuration_id(&mut self, configuration_id: String) {
    self.configuration_id = Some(configuration_id);
  }

  pub fn with_configuration_id(mut self, configuration_id: String) -> Configuration {
    self.configuration_id = Some(configuration_id);
    self
  }

  pub fn configuration_id(&self) -> Option<&String> {
    self.configuration_id.as_ref()
  }

  pub fn reset_configuration_id(&mut self) {
    self.configuration_id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> Configuration {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_created(&mut self, created: String) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: String) -> Configuration {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&String> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_updated(&mut self, updated: String) {
    self.updated = Some(updated);
  }

  pub fn with_updated(mut self, updated: String) -> Configuration {
    self.updated = Some(updated);
    self
  }

  pub fn updated(&self) -> Option<&String> {
    self.updated.as_ref()
  }

  pub fn reset_updated(&mut self) {
    self.updated = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> Configuration {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_conversions(&mut self, conversions: ::models::Conversions) {
    self.conversions = Some(conversions);
  }

  pub fn with_conversions(mut self, conversions: ::models::Conversions) -> Configuration {
    self.conversions = Some(conversions);
    self
  }

  pub fn conversions(&self) -> Option<&::models::Conversions> {
    self.conversions.as_ref()
  }

  pub fn reset_conversions(&mut self) {
    self.conversions = None;
  }

  pub fn set_enrichments(&mut self, enrichments: Vec<::models::Enrichment>) {
    self.enrichments = Some(enrichments);
  }

  pub fn with_enrichments(mut self, enrichments: Vec<::models::Enrichment>) -> Configuration {
    self.enrichments = Some(enrichments);
    self
  }

  pub fn enrichments(&self) -> Option<&Vec<::models::Enrichment>> {
    self.enrichments.as_ref()
  }

  pub fn reset_enrichments(&mut self) {
    self.enrichments = None;
  }

  pub fn set_normalizations(&mut self, normalizations: Vec<::models::NormalizationOperation>) {
    self.normalizations = Some(normalizations);
  }

  pub fn with_normalizations(mut self, normalizations: Vec<::models::NormalizationOperation>) -> Configuration {
    self.normalizations = Some(normalizations);
    self
  }

  pub fn normalizations(&self) -> Option<&Vec<::models::NormalizationOperation>> {
    self.normalizations.as_ref()
  }

  pub fn reset_normalizations(&mut self) {
    self.normalizations = None;
  }

  pub fn set_source(&mut self, source: ::models::Source) {
    self.source = Some(source);
  }

  pub fn with_source(mut self, source: ::models::Source) -> Configuration {
    self.source = Some(source);
    self
  }

  pub fn source(&self) -> Option<&::models::Source> {
    self.source.as_ref()
  }

  pub fn reset_source(&mut self) {
    self.source = None;
  }

}



