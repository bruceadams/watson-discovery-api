/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// MetricTokenAggregation : An aggregation analyzing log information for queries and events.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MetricTokenAggregation {
  /// The event type associated with this metric result. This field, when present, will always be `click`.
  #[serde(rename = "event_type")]
  event_type: Option<String>,
  #[serde(rename = "results")]
  results: Option<Vec<::models::MetricTokenAggregationResult>>
}

impl MetricTokenAggregation {
  /// An aggregation analyzing log information for queries and events.
  pub fn new() -> MetricTokenAggregation {
    MetricTokenAggregation {
      event_type: None,
      results: None
    }
  }

  pub fn set_event_type(&mut self, event_type: String) {
    self.event_type = Some(event_type);
  }

  pub fn with_event_type(mut self, event_type: String) -> MetricTokenAggregation {
    self.event_type = Some(event_type);
    self
  }

  pub fn event_type(&self) -> Option<&String> {
    self.event_type.as_ref()
  }

  pub fn reset_event_type(&mut self) {
    self.event_type = None;
  }

  pub fn set_results(&mut self, results: Vec<::models::MetricTokenAggregationResult>) {
    self.results = Some(results);
  }

  pub fn with_results(mut self, results: Vec<::models::MetricTokenAggregationResult>) -> MetricTokenAggregation {
    self.results = Some(results);
    self
  }

  pub fn results(&self) -> Option<&Vec<::models::MetricTokenAggregationResult>> {
    self.results.as_ref()
  }

  pub fn reset_results(&mut self) {
    self.results = None;
  }

}



