/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct QueryNoticesResponse {
  #[serde(rename = "matching_results")]
  matching_results: Option<i32>,
  #[serde(rename = "results")]
  results: Option<Vec<::models::QueryNoticesResult>>,
  #[serde(rename = "aggregations")]
  aggregations: Option<Vec<::models::QueryAggregation>>,
  #[serde(rename = "passages")]
  passages: Option<Vec<::models::QueryPassages>>,
  #[serde(rename = "duplicates_removed")]
  duplicates_removed: Option<i32>
}

impl QueryNoticesResponse {
  pub fn new() -> QueryNoticesResponse {
    QueryNoticesResponse {
      matching_results: None,
      results: None,
      aggregations: None,
      passages: None,
      duplicates_removed: None
    }
  }

  pub fn set_matching_results(&mut self, matching_results: i32) {
    self.matching_results = Some(matching_results);
  }

  pub fn with_matching_results(mut self, matching_results: i32) -> QueryNoticesResponse {
    self.matching_results = Some(matching_results);
    self
  }

  pub fn matching_results(&self) -> Option<&i32> {
    self.matching_results.as_ref()
  }

  pub fn reset_matching_results(&mut self) {
    self.matching_results = None;
  }

  pub fn set_results(&mut self, results: Vec<::models::QueryNoticesResult>) {
    self.results = Some(results);
  }

  pub fn with_results(mut self, results: Vec<::models::QueryNoticesResult>) -> QueryNoticesResponse {
    self.results = Some(results);
    self
  }

  pub fn results(&self) -> Option<&Vec<::models::QueryNoticesResult>> {
    self.results.as_ref()
  }

  pub fn reset_results(&mut self) {
    self.results = None;
  }

  pub fn set_aggregations(&mut self, aggregations: Vec<::models::QueryAggregation>) {
    self.aggregations = Some(aggregations);
  }

  pub fn with_aggregations(mut self, aggregations: Vec<::models::QueryAggregation>) -> QueryNoticesResponse {
    self.aggregations = Some(aggregations);
    self
  }

  pub fn aggregations(&self) -> Option<&Vec<::models::QueryAggregation>> {
    self.aggregations.as_ref()
  }

  pub fn reset_aggregations(&mut self) {
    self.aggregations = None;
  }

  pub fn set_passages(&mut self, passages: Vec<::models::QueryPassages>) {
    self.passages = Some(passages);
  }

  pub fn with_passages(mut self, passages: Vec<::models::QueryPassages>) -> QueryNoticesResponse {
    self.passages = Some(passages);
    self
  }

  pub fn passages(&self) -> Option<&Vec<::models::QueryPassages>> {
    self.passages.as_ref()
  }

  pub fn reset_passages(&mut self) {
    self.passages = None;
  }

  pub fn set_duplicates_removed(&mut self, duplicates_removed: i32) {
    self.duplicates_removed = Some(duplicates_removed);
  }

  pub fn with_duplicates_removed(mut self, duplicates_removed: i32) -> QueryNoticesResponse {
    self.duplicates_removed = Some(duplicates_removed);
    self
  }

  pub fn duplicates_removed(&self) -> Option<&i32> {
    self.duplicates_removed.as_ref()
  }

  pub fn reset_duplicates_removed(&mut self) {
    self.duplicates_removed = None;
  }

}



