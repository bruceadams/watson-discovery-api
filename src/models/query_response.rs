/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// QueryResponse : A response containing the documents and aggregations for the query.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct QueryResponse {
  #[serde(rename = "matching_results")]
  matching_results: Option<i32>,
  #[serde(rename = "results")]
  results: Option<Vec<::models::QueryResult>>,
  #[serde(rename = "aggregations")]
  aggregations: Option<Vec<::models::QueryAggregation>>,
  #[serde(rename = "passages")]
  passages: Option<Vec<::models::QueryPassages>>,
  #[serde(rename = "duplicates_removed")]
  duplicates_removed: Option<i32>,
  /// The session token for this query. The session token can be used to add events associated with this query to the query and event log.  **Important:** Session tokens are case sensitive.
  #[serde(rename = "session_token")]
  session_token: Option<String>,
  #[serde(rename = "retrieval_details")]
  retrieval_details: Option<::models::RetrievalDetails>
}

impl QueryResponse {
  /// A response containing the documents and aggregations for the query.
  pub fn new() -> QueryResponse {
    QueryResponse {
      matching_results: None,
      results: None,
      aggregations: None,
      passages: None,
      duplicates_removed: None,
      session_token: None,
      retrieval_details: None
    }
  }

  pub fn set_matching_results(&mut self, matching_results: i32) {
    self.matching_results = Some(matching_results);
  }

  pub fn with_matching_results(mut self, matching_results: i32) -> QueryResponse {
    self.matching_results = Some(matching_results);
    self
  }

  pub fn matching_results(&self) -> Option<&i32> {
    self.matching_results.as_ref()
  }

  pub fn reset_matching_results(&mut self) {
    self.matching_results = None;
  }

  pub fn set_results(&mut self, results: Vec<::models::QueryResult>) {
    self.results = Some(results);
  }

  pub fn with_results(mut self, results: Vec<::models::QueryResult>) -> QueryResponse {
    self.results = Some(results);
    self
  }

  pub fn results(&self) -> Option<&Vec<::models::QueryResult>> {
    self.results.as_ref()
  }

  pub fn reset_results(&mut self) {
    self.results = None;
  }

  pub fn set_aggregations(&mut self, aggregations: Vec<::models::QueryAggregation>) {
    self.aggregations = Some(aggregations);
  }

  pub fn with_aggregations(mut self, aggregations: Vec<::models::QueryAggregation>) -> QueryResponse {
    self.aggregations = Some(aggregations);
    self
  }

  pub fn aggregations(&self) -> Option<&Vec<::models::QueryAggregation>> {
    self.aggregations.as_ref()
  }

  pub fn reset_aggregations(&mut self) {
    self.aggregations = None;
  }

  pub fn set_passages(&mut self, passages: Vec<::models::QueryPassages>) {
    self.passages = Some(passages);
  }

  pub fn with_passages(mut self, passages: Vec<::models::QueryPassages>) -> QueryResponse {
    self.passages = Some(passages);
    self
  }

  pub fn passages(&self) -> Option<&Vec<::models::QueryPassages>> {
    self.passages.as_ref()
  }

  pub fn reset_passages(&mut self) {
    self.passages = None;
  }

  pub fn set_duplicates_removed(&mut self, duplicates_removed: i32) {
    self.duplicates_removed = Some(duplicates_removed);
  }

  pub fn with_duplicates_removed(mut self, duplicates_removed: i32) -> QueryResponse {
    self.duplicates_removed = Some(duplicates_removed);
    self
  }

  pub fn duplicates_removed(&self) -> Option<&i32> {
    self.duplicates_removed.as_ref()
  }

  pub fn reset_duplicates_removed(&mut self) {
    self.duplicates_removed = None;
  }

  pub fn set_session_token(&mut self, session_token: String) {
    self.session_token = Some(session_token);
  }

  pub fn with_session_token(mut self, session_token: String) -> QueryResponse {
    self.session_token = Some(session_token);
    self
  }

  pub fn session_token(&self) -> Option<&String> {
    self.session_token.as_ref()
  }

  pub fn reset_session_token(&mut self) {
    self.session_token = None;
  }

  pub fn set_retrieval_details(&mut self, retrieval_details: ::models::RetrievalDetails) {
    self.retrieval_details = Some(retrieval_details);
  }

  pub fn with_retrieval_details(mut self, retrieval_details: ::models::RetrievalDetails) -> QueryResponse {
    self.retrieval_details = Some(retrieval_details);
    self
  }

  pub fn retrieval_details(&self) -> Option<&::models::RetrievalDetails> {
    self.retrieval_details.as_ref()
  }

  pub fn reset_retrieval_details(&mut self) {
    self.retrieval_details = None;
  }

}



