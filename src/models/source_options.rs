/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// SourceOptions : The **options** object defines which items to crawl from the source system.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SourceOptions {
  /// Array of folders to crawl from the Box source. Only valid, and required, when the **type** field of the **source** object is set to `box`.
  #[serde(rename = "folders")]
  folders: Option<Vec<::models::SourceOptionsFolder>>,
  /// Array of Salesforce document object types to crawl from the Salesforce source. Only valid, and required, when the **type** field of the **source** object is set to `salesforce`.
  #[serde(rename = "objects")]
  objects: Option<Vec<::models::SourceOptionsObject>>,
  /// Array of Microsoft SharePointoint Online site collections to crawl from the SharePoint source. Only valid and required when the **type** field of the **source** object is set to `sharepoint`.
  #[serde(rename = "site_collections")]
  site_collections: Option<Vec<::models::SourceOptionsSiteColl>>,
  /// Array of Web page URLs to begin crawling the web from. Only valid and required when the **type** field of the **source** object is set to `web_crawl`.
  #[serde(rename = "urls")]
  urls: Option<Vec<::models::SourceOptionsWebCrawl>>
}

impl SourceOptions {
  /// The **options** object defines which items to crawl from the source system.
  pub fn new() -> SourceOptions {
    SourceOptions {
      folders: None,
      objects: None,
      site_collections: None,
      urls: None
    }
  }

  pub fn set_folders(&mut self, folders: Vec<::models::SourceOptionsFolder>) {
    self.folders = Some(folders);
  }

  pub fn with_folders(mut self, folders: Vec<::models::SourceOptionsFolder>) -> SourceOptions {
    self.folders = Some(folders);
    self
  }

  pub fn folders(&self) -> Option<&Vec<::models::SourceOptionsFolder>> {
    self.folders.as_ref()
  }

  pub fn reset_folders(&mut self) {
    self.folders = None;
  }

  pub fn set_objects(&mut self, objects: Vec<::models::SourceOptionsObject>) {
    self.objects = Some(objects);
  }

  pub fn with_objects(mut self, objects: Vec<::models::SourceOptionsObject>) -> SourceOptions {
    self.objects = Some(objects);
    self
  }

  pub fn objects(&self) -> Option<&Vec<::models::SourceOptionsObject>> {
    self.objects.as_ref()
  }

  pub fn reset_objects(&mut self) {
    self.objects = None;
  }

  pub fn set_site_collections(&mut self, site_collections: Vec<::models::SourceOptionsSiteColl>) {
    self.site_collections = Some(site_collections);
  }

  pub fn with_site_collections(mut self, site_collections: Vec<::models::SourceOptionsSiteColl>) -> SourceOptions {
    self.site_collections = Some(site_collections);
    self
  }

  pub fn site_collections(&self) -> Option<&Vec<::models::SourceOptionsSiteColl>> {
    self.site_collections.as_ref()
  }

  pub fn reset_site_collections(&mut self) {
    self.site_collections = None;
  }

  pub fn set_urls(&mut self, urls: Vec<::models::SourceOptionsWebCrawl>) {
    self.urls = Some(urls);
  }

  pub fn with_urls(mut self, urls: Vec<::models::SourceOptionsWebCrawl>) -> SourceOptions {
    self.urls = Some(urls);
    self
  }

  pub fn urls(&self) -> Option<&Vec<::models::SourceOptionsWebCrawl>> {
    self.urls.as_ref()
  }

  pub fn reset_urls(&mut self) {
    self.urls = None;
  }

}



