/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// QueryEntitiesResponseItem : Object containing Entity query response information

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct QueryEntitiesResponseItem {
  /// Entity text content.
  #[serde(rename = "text")]
  text: Option<String>,
  /// The type of the result entity.
  #[serde(rename = "type")]
  type_: Option<String>,
  /// List of different evidentiary items to support the result.
  #[serde(rename = "evidence")]
  evidence: Option<Vec<::models::QueryEvidence>>
}

impl QueryEntitiesResponseItem {
  /// Object containing Entity query response information
  pub fn new() -> QueryEntitiesResponseItem {
    QueryEntitiesResponseItem {
      text: None,
      type_: None,
      evidence: None
    }
  }

  pub fn set_text(&mut self, text: String) {
    self.text = Some(text);
  }

  pub fn with_text(mut self, text: String) -> QueryEntitiesResponseItem {
    self.text = Some(text);
    self
  }

  pub fn text(&self) -> Option<&String> {
    self.text.as_ref()
  }

  pub fn reset_text(&mut self) {
    self.text = None;
  }

  pub fn set_type_(&mut self, type_: String) {
    self.type_ = Some(type_);
  }

  pub fn with_type_(mut self, type_: String) -> QueryEntitiesResponseItem {
    self.type_ = Some(type_);
    self
  }

  pub fn type_(&self) -> Option<&String> {
    self.type_.as_ref()
  }

  pub fn reset_type_(&mut self) {
    self.type_ = None;
  }

  pub fn set_evidence(&mut self, evidence: Vec<::models::QueryEvidence>) {
    self.evidence = Some(evidence);
  }

  pub fn with_evidence(mut self, evidence: Vec<::models::QueryEvidence>) -> QueryEntitiesResponseItem {
    self.evidence = Some(evidence);
    self
  }

  pub fn evidence(&self) -> Option<&Vec<::models::QueryEvidence>> {
    self.evidence.as_ref()
  }

  pub fn reset_evidence(&mut self) {
    self.evidence = None;
  }

}



