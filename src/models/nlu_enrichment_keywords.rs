/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// NluEnrichmentKeywords : An object specifying the Keyword enrichment and related parameters.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NluEnrichmentKeywords {
  /// When `true`, sentiment analysis of keywords will be performed on the specified field.
  #[serde(rename = "sentiment")]
  sentiment: Option<bool>,
  /// When `true`, emotion detection of keywords will be performed on the specified field.
  #[serde(rename = "emotion")]
  emotion: Option<bool>,
  /// The maximum number of keywords to extract for each instance of the specified field.
  #[serde(rename = "limit")]
  limit: Option<i32>
}

impl NluEnrichmentKeywords {
  /// An object specifying the Keyword enrichment and related parameters.
  pub fn new() -> NluEnrichmentKeywords {
    NluEnrichmentKeywords {
      sentiment: None,
      emotion: None,
      limit: None
    }
  }

  pub fn set_sentiment(&mut self, sentiment: bool) {
    self.sentiment = Some(sentiment);
  }

  pub fn with_sentiment(mut self, sentiment: bool) -> NluEnrichmentKeywords {
    self.sentiment = Some(sentiment);
    self
  }

  pub fn sentiment(&self) -> Option<&bool> {
    self.sentiment.as_ref()
  }

  pub fn reset_sentiment(&mut self) {
    self.sentiment = None;
  }

  pub fn set_emotion(&mut self, emotion: bool) {
    self.emotion = Some(emotion);
  }

  pub fn with_emotion(mut self, emotion: bool) -> NluEnrichmentKeywords {
    self.emotion = Some(emotion);
    self
  }

  pub fn emotion(&self) -> Option<&bool> {
    self.emotion.as_ref()
  }

  pub fn reset_emotion(&mut self) {
    self.emotion = None;
  }

  pub fn set_limit(&mut self, limit: i32) {
    self.limit = Some(limit);
  }

  pub fn with_limit(mut self, limit: i32) -> NluEnrichmentKeywords {
    self.limit = Some(limit);
    self
  }

  pub fn limit(&self) -> Option<&i32> {
    self.limit.as_ref()
  }

  pub fn reset_limit(&mut self) {
    self.limit = None;
  }

}



