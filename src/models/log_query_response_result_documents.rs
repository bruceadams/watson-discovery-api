/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// LogQueryResponseResultDocuments : Object containing result information that was returned by the query used to create this log entry. Only returned with logs of type `query`.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct LogQueryResponseResultDocuments {
  #[serde(rename = "results")]
  results: Option<Vec<::models::LogQueryResponseResultDocumentsResult>>,
  /// The number of results returned in the query associate with this log.
  #[serde(rename = "count")]
  count: Option<i32>
}

impl LogQueryResponseResultDocuments {
  /// Object containing result information that was returned by the query used to create this log entry. Only returned with logs of type `query`.
  pub fn new() -> LogQueryResponseResultDocuments {
    LogQueryResponseResultDocuments {
      results: None,
      count: None
    }
  }

  pub fn set_results(&mut self, results: Vec<::models::LogQueryResponseResultDocumentsResult>) {
    self.results = Some(results);
  }

  pub fn with_results(mut self, results: Vec<::models::LogQueryResponseResultDocumentsResult>) -> LogQueryResponseResultDocuments {
    self.results = Some(results);
    self
  }

  pub fn results(&self) -> Option<&Vec<::models::LogQueryResponseResultDocumentsResult>> {
    self.results.as_ref()
  }

  pub fn reset_results(&mut self) {
    self.results = None;
  }

  pub fn set_count(&mut self, count: i32) {
    self.count = Some(count);
  }

  pub fn with_count(mut self, count: i32) -> LogQueryResponseResultDocuments {
    self.count = Some(count);
    self
  }

  pub fn count(&self) -> Option<&i32> {
    self.count.as_ref()
  }

  pub fn reset_count(&mut self) {
    self.count = None;
  }

}



