/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct QueryEntities {
  /// The entity query feature to perform. Supported features are `disambiguate` and `similar_entities`
  #[serde(rename = "feature")]
  feature: Option<String>,
  #[serde(rename = "entity")]
  entity: Option<::models::QueryEntitiesEntity>,
  #[serde(rename = "context")]
  context: Option<::models::QueryEntitiesContext>,
  /// The number of results to return. The default is `10`. The maximum is `1000`.
  #[serde(rename = "count")]
  count: Option<i32>,
  /// The number of evidence items to return for each result. The default is `0`. The maximum number of evidence items per query is 10,000.
  #[serde(rename = "evidence_count")]
  evidence_count: Option<i32>
}

impl QueryEntities {
  pub fn new() -> QueryEntities {
    QueryEntities {
      feature: None,
      entity: None,
      context: None,
      count: None,
      evidence_count: None
    }
  }

  pub fn set_feature(&mut self, feature: String) {
    self.feature = Some(feature);
  }

  pub fn with_feature(mut self, feature: String) -> QueryEntities {
    self.feature = Some(feature);
    self
  }

  pub fn feature(&self) -> Option<&String> {
    self.feature.as_ref()
  }

  pub fn reset_feature(&mut self) {
    self.feature = None;
  }

  pub fn set_entity(&mut self, entity: ::models::QueryEntitiesEntity) {
    self.entity = Some(entity);
  }

  pub fn with_entity(mut self, entity: ::models::QueryEntitiesEntity) -> QueryEntities {
    self.entity = Some(entity);
    self
  }

  pub fn entity(&self) -> Option<&::models::QueryEntitiesEntity> {
    self.entity.as_ref()
  }

  pub fn reset_entity(&mut self) {
    self.entity = None;
  }

  pub fn set_context(&mut self, context: ::models::QueryEntitiesContext) {
    self.context = Some(context);
  }

  pub fn with_context(mut self, context: ::models::QueryEntitiesContext) -> QueryEntities {
    self.context = Some(context);
    self
  }

  pub fn context(&self) -> Option<&::models::QueryEntitiesContext> {
    self.context.as_ref()
  }

  pub fn reset_context(&mut self) {
    self.context = None;
  }

  pub fn set_count(&mut self, count: i32) {
    self.count = Some(count);
  }

  pub fn with_count(mut self, count: i32) -> QueryEntities {
    self.count = Some(count);
    self
  }

  pub fn count(&self) -> Option<&i32> {
    self.count.as_ref()
  }

  pub fn reset_count(&mut self) {
    self.count = None;
  }

  pub fn set_evidence_count(&mut self, evidence_count: i32) {
    self.evidence_count = Some(evidence_count);
  }

  pub fn with_evidence_count(mut self, evidence_count: i32) -> QueryEntities {
    self.evidence_count = Some(evidence_count);
    self
  }

  pub fn evidence_count(&self) -> Option<&i32> {
    self.evidence_count.as_ref()
  }

  pub fn reset_evidence_count(&mut self) {
    self.evidence_count = None;
  }

}



