/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// QueryLarge : Object that describes a long query.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct QueryLarge {
  /// A cacheable query that excludes documents that don't mention the query content. Filter searches are better for metadata-type searches and for assessing the concepts in the data set.
  #[serde(rename = "filter")]
  filter: Option<String>,
  /// A query search returns all documents in your data set with full enrichments and full text, but with the most relevant documents listed first. Use a query search when you want to find the most relevant search results. You cannot use **natural_language_query** and **query** at the same time.
  #[serde(rename = "query")]
  query: Option<String>,
  /// A natural language query that returns relevant documents by utilizing training data and natural language understanding. You cannot use **natural_language_query** and **query** at the same time.
  #[serde(rename = "natural_language_query")]
  natural_language_query: Option<String>,
  /// A passages query that returns the most relevant passages from the results.
  #[serde(rename = "passages")]
  passages: Option<bool>,
  /// An aggregation search that returns an exact answer by combining query search with filters. Useful for applications to build lists, tables, and time series. For a full list of possible aggregations, see the Query reference.
  #[serde(rename = "aggregation")]
  aggregation: Option<String>,
  /// Number of results to return.
  #[serde(rename = "count")]
  count: Option<i32>,
  /// A comma-separated list of the portion of the document hierarchy to return.
  #[serde(rename = "return")]
  return_: Option<String>,
  /// The number of query results to skip at the beginning. For example, if the total number of results that are returned is 10 and the offset is 8, it returns the last two results.
  #[serde(rename = "offset")]
  offset: Option<i32>,
  /// A comma-separated list of fields in the document to sort on. You can optionally specify a sort direction by prefixing the field with `-` for descending or `+` for ascending. Ascending is the default sort direction if no prefix is specified. This parameter cannot be used in the same query as the **bias** parameter.
  #[serde(rename = "sort")]
  sort: Option<String>,
  /// When true, a highlight field is returned for each result which contains the fields which match the query with `<em></em>` tags around the matching query terms.
  #[serde(rename = "highlight")]
  highlight: Option<bool>,
  /// A comma-separated list of fields that passages are drawn from. If this parameter not specified, then all top-level fields are included.
  #[serde(rename = "passages.fields")]
  passages_fields: Option<String>,
  /// The maximum number of passages to return. The search returns fewer passages if the requested total is not found. The default is `10`. The maximum is `100`.
  #[serde(rename = "passages.count")]
  passages_count: Option<i32>,
  /// The approximate number of characters that any one passage will have.
  #[serde(rename = "passages.characters")]
  passages_characters: Option<i32>,
  /// When `true` and used with a Watson Discovery News collection, duplicate results (based on the contents of the **title** field) are removed. Duplicate comparison is limited to the current query only; **offset** is not considered. This parameter is currently Beta functionality.
  #[serde(rename = "deduplicate")]
  deduplicate: Option<bool>,
  /// When specified, duplicate results based on the field specified are removed from the returned results. Duplicate comparison is limited to the current query only, **offset** is not considered. This parameter is currently Beta functionality.
  #[serde(rename = "deduplicate.field")]
  deduplicate_field: Option<String>,
  /// A comma-separated list of collection IDs to be queried against. Required when querying multiple collections, invalid when performing a single collection query.
  #[serde(rename = "collection_ids")]
  collection_ids: Option<String>,
  ///  When `true`, results are returned based on their similarity to the document IDs specified in the **similar.document_ids** parameter.
  #[serde(rename = "similar")]
  similar: Option<bool>,
  /// A comma-separated list of document IDs to find similar documents.  **Tip:** Include the **natural_language_query** parameter to expand the scope of the document similarity search with the natural language query. Other query parameters, such as **filter** and **query**, are subsequently applied and reduce the scope.
  #[serde(rename = "similar.document_ids")]
  similar_document_ids: Option<String>,
  /// A comma-separated list of field names that are used as a basis for comparison to identify similar documents. If not specified, the entire document is used for comparison.
  #[serde(rename = "similar.fields")]
  similar_fields: Option<String>,
  /// Field which the returned results will be biased against. The specified field must be either a **date** or **number** format. When a **date** type field is specified returned results are biased towards field values closer to the current date. When a **number** type field is specified, returned results are biased towards higher field values. This parameter cannot be used in the same query as the **sort** parameter.
  #[serde(rename = "bias")]
  bias: Option<String>
}

impl QueryLarge {
  /// Object that describes a long query.
  pub fn new() -> QueryLarge {
    QueryLarge {
      filter: None,
      query: None,
      natural_language_query: None,
      passages: None,
      aggregation: None,
      count: None,
      return_: None,
      offset: None,
      sort: None,
      highlight: None,
      passages_fields: None,
      passages_count: None,
      passages_characters: None,
      deduplicate: None,
      deduplicate_field: None,
      collection_ids: None,
      similar: None,
      similar_document_ids: None,
      similar_fields: None,
      bias: None
    }
  }

  pub fn set_filter(&mut self, filter: String) {
    self.filter = Some(filter);
  }

  pub fn with_filter(mut self, filter: String) -> QueryLarge {
    self.filter = Some(filter);
    self
  }

  pub fn filter(&self) -> Option<&String> {
    self.filter.as_ref()
  }

  pub fn reset_filter(&mut self) {
    self.filter = None;
  }

  pub fn set_query(&mut self, query: String) {
    self.query = Some(query);
  }

  pub fn with_query(mut self, query: String) -> QueryLarge {
    self.query = Some(query);
    self
  }

  pub fn query(&self) -> Option<&String> {
    self.query.as_ref()
  }

  pub fn reset_query(&mut self) {
    self.query = None;
  }

  pub fn set_natural_language_query(&mut self, natural_language_query: String) {
    self.natural_language_query = Some(natural_language_query);
  }

  pub fn with_natural_language_query(mut self, natural_language_query: String) -> QueryLarge {
    self.natural_language_query = Some(natural_language_query);
    self
  }

  pub fn natural_language_query(&self) -> Option<&String> {
    self.natural_language_query.as_ref()
  }

  pub fn reset_natural_language_query(&mut self) {
    self.natural_language_query = None;
  }

  pub fn set_passages(&mut self, passages: bool) {
    self.passages = Some(passages);
  }

  pub fn with_passages(mut self, passages: bool) -> QueryLarge {
    self.passages = Some(passages);
    self
  }

  pub fn passages(&self) -> Option<&bool> {
    self.passages.as_ref()
  }

  pub fn reset_passages(&mut self) {
    self.passages = None;
  }

  pub fn set_aggregation(&mut self, aggregation: String) {
    self.aggregation = Some(aggregation);
  }

  pub fn with_aggregation(mut self, aggregation: String) -> QueryLarge {
    self.aggregation = Some(aggregation);
    self
  }

  pub fn aggregation(&self) -> Option<&String> {
    self.aggregation.as_ref()
  }

  pub fn reset_aggregation(&mut self) {
    self.aggregation = None;
  }

  pub fn set_count(&mut self, count: i32) {
    self.count = Some(count);
  }

  pub fn with_count(mut self, count: i32) -> QueryLarge {
    self.count = Some(count);
    self
  }

  pub fn count(&self) -> Option<&i32> {
    self.count.as_ref()
  }

  pub fn reset_count(&mut self) {
    self.count = None;
  }

  pub fn set_return_(&mut self, return_: String) {
    self.return_ = Some(return_);
  }

  pub fn with_return_(mut self, return_: String) -> QueryLarge {
    self.return_ = Some(return_);
    self
  }

  pub fn return_(&self) -> Option<&String> {
    self.return_.as_ref()
  }

  pub fn reset_return_(&mut self) {
    self.return_ = None;
  }

  pub fn set_offset(&mut self, offset: i32) {
    self.offset = Some(offset);
  }

  pub fn with_offset(mut self, offset: i32) -> QueryLarge {
    self.offset = Some(offset);
    self
  }

  pub fn offset(&self) -> Option<&i32> {
    self.offset.as_ref()
  }

  pub fn reset_offset(&mut self) {
    self.offset = None;
  }

  pub fn set_sort(&mut self, sort: String) {
    self.sort = Some(sort);
  }

  pub fn with_sort(mut self, sort: String) -> QueryLarge {
    self.sort = Some(sort);
    self
  }

  pub fn sort(&self) -> Option<&String> {
    self.sort.as_ref()
  }

  pub fn reset_sort(&mut self) {
    self.sort = None;
  }

  pub fn set_highlight(&mut self, highlight: bool) {
    self.highlight = Some(highlight);
  }

  pub fn with_highlight(mut self, highlight: bool) -> QueryLarge {
    self.highlight = Some(highlight);
    self
  }

  pub fn highlight(&self) -> Option<&bool> {
    self.highlight.as_ref()
  }

  pub fn reset_highlight(&mut self) {
    self.highlight = None;
  }

  pub fn set_passages_fields(&mut self, passages_fields: String) {
    self.passages_fields = Some(passages_fields);
  }

  pub fn with_passages_fields(mut self, passages_fields: String) -> QueryLarge {
    self.passages_fields = Some(passages_fields);
    self
  }

  pub fn passages_fields(&self) -> Option<&String> {
    self.passages_fields.as_ref()
  }

  pub fn reset_passages_fields(&mut self) {
    self.passages_fields = None;
  }

  pub fn set_passages_count(&mut self, passages_count: i32) {
    self.passages_count = Some(passages_count);
  }

  pub fn with_passages_count(mut self, passages_count: i32) -> QueryLarge {
    self.passages_count = Some(passages_count);
    self
  }

  pub fn passages_count(&self) -> Option<&i32> {
    self.passages_count.as_ref()
  }

  pub fn reset_passages_count(&mut self) {
    self.passages_count = None;
  }

  pub fn set_passages_characters(&mut self, passages_characters: i32) {
    self.passages_characters = Some(passages_characters);
  }

  pub fn with_passages_characters(mut self, passages_characters: i32) -> QueryLarge {
    self.passages_characters = Some(passages_characters);
    self
  }

  pub fn passages_characters(&self) -> Option<&i32> {
    self.passages_characters.as_ref()
  }

  pub fn reset_passages_characters(&mut self) {
    self.passages_characters = None;
  }

  pub fn set_deduplicate(&mut self, deduplicate: bool) {
    self.deduplicate = Some(deduplicate);
  }

  pub fn with_deduplicate(mut self, deduplicate: bool) -> QueryLarge {
    self.deduplicate = Some(deduplicate);
    self
  }

  pub fn deduplicate(&self) -> Option<&bool> {
    self.deduplicate.as_ref()
  }

  pub fn reset_deduplicate(&mut self) {
    self.deduplicate = None;
  }

  pub fn set_deduplicate_field(&mut self, deduplicate_field: String) {
    self.deduplicate_field = Some(deduplicate_field);
  }

  pub fn with_deduplicate_field(mut self, deduplicate_field: String) -> QueryLarge {
    self.deduplicate_field = Some(deduplicate_field);
    self
  }

  pub fn deduplicate_field(&self) -> Option<&String> {
    self.deduplicate_field.as_ref()
  }

  pub fn reset_deduplicate_field(&mut self) {
    self.deduplicate_field = None;
  }

  pub fn set_collection_ids(&mut self, collection_ids: String) {
    self.collection_ids = Some(collection_ids);
  }

  pub fn with_collection_ids(mut self, collection_ids: String) -> QueryLarge {
    self.collection_ids = Some(collection_ids);
    self
  }

  pub fn collection_ids(&self) -> Option<&String> {
    self.collection_ids.as_ref()
  }

  pub fn reset_collection_ids(&mut self) {
    self.collection_ids = None;
  }

  pub fn set_similar(&mut self, similar: bool) {
    self.similar = Some(similar);
  }

  pub fn with_similar(mut self, similar: bool) -> QueryLarge {
    self.similar = Some(similar);
    self
  }

  pub fn similar(&self) -> Option<&bool> {
    self.similar.as_ref()
  }

  pub fn reset_similar(&mut self) {
    self.similar = None;
  }

  pub fn set_similar_document_ids(&mut self, similar_document_ids: String) {
    self.similar_document_ids = Some(similar_document_ids);
  }

  pub fn with_similar_document_ids(mut self, similar_document_ids: String) -> QueryLarge {
    self.similar_document_ids = Some(similar_document_ids);
    self
  }

  pub fn similar_document_ids(&self) -> Option<&String> {
    self.similar_document_ids.as_ref()
  }

  pub fn reset_similar_document_ids(&mut self) {
    self.similar_document_ids = None;
  }

  pub fn set_similar_fields(&mut self, similar_fields: String) {
    self.similar_fields = Some(similar_fields);
  }

  pub fn with_similar_fields(mut self, similar_fields: String) -> QueryLarge {
    self.similar_fields = Some(similar_fields);
    self
  }

  pub fn similar_fields(&self) -> Option<&String> {
    self.similar_fields.as_ref()
  }

  pub fn reset_similar_fields(&mut self) {
    self.similar_fields = None;
  }

  pub fn set_bias(&mut self, bias: String) {
    self.bias = Some(bias);
  }

  pub fn with_bias(mut self, bias: String) -> QueryLarge {
    self.bias = Some(bias);
    self
  }

  pub fn bias(&self) -> Option<&String> {
    self.bias.as_ref()
  }

  pub fn reset_bias(&mut self) {
    self.bias = None;
  }

}



