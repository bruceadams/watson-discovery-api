/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// QueryRelations : A respresentation of a relationship query.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct QueryRelations {
  /// An array of entities to find relationships for.
  #[serde(rename = "entities")]
  entities: Option<Vec<::models::QueryRelationsEntity>>,
  #[serde(rename = "context")]
  context: Option<::models::QueryEntitiesContext>,
  /// The sorting method for the relationships, can be `score` or `frequency`. `frequency` is the number of unique times each entity is identified. The default is `score`. This parameter cannot be used in the same query as the **bias** parameter.
  #[serde(rename = "sort")]
  sort: Option<String>,
  #[serde(rename = "filter")]
  filter: Option<::models::QueryRelationsFilter>,
  /// The number of results to return. The default is `10`. The maximum is `1000`.
  #[serde(rename = "count")]
  count: Option<i32>,
  /// The number of evidence items to return for each result. The default is `0`. The maximum number of evidence items per query is 10,000.
  #[serde(rename = "evidence_count")]
  evidence_count: Option<i32>
}

impl QueryRelations {
  /// A respresentation of a relationship query.
  pub fn new() -> QueryRelations {
    QueryRelations {
      entities: None,
      context: None,
      sort: None,
      filter: None,
      count: None,
      evidence_count: None
    }
  }

  pub fn set_entities(&mut self, entities: Vec<::models::QueryRelationsEntity>) {
    self.entities = Some(entities);
  }

  pub fn with_entities(mut self, entities: Vec<::models::QueryRelationsEntity>) -> QueryRelations {
    self.entities = Some(entities);
    self
  }

  pub fn entities(&self) -> Option<&Vec<::models::QueryRelationsEntity>> {
    self.entities.as_ref()
  }

  pub fn reset_entities(&mut self) {
    self.entities = None;
  }

  pub fn set_context(&mut self, context: ::models::QueryEntitiesContext) {
    self.context = Some(context);
  }

  pub fn with_context(mut self, context: ::models::QueryEntitiesContext) -> QueryRelations {
    self.context = Some(context);
    self
  }

  pub fn context(&self) -> Option<&::models::QueryEntitiesContext> {
    self.context.as_ref()
  }

  pub fn reset_context(&mut self) {
    self.context = None;
  }

  pub fn set_sort(&mut self, sort: String) {
    self.sort = Some(sort);
  }

  pub fn with_sort(mut self, sort: String) -> QueryRelations {
    self.sort = Some(sort);
    self
  }

  pub fn sort(&self) -> Option<&String> {
    self.sort.as_ref()
  }

  pub fn reset_sort(&mut self) {
    self.sort = None;
  }

  pub fn set_filter(&mut self, filter: ::models::QueryRelationsFilter) {
    self.filter = Some(filter);
  }

  pub fn with_filter(mut self, filter: ::models::QueryRelationsFilter) -> QueryRelations {
    self.filter = Some(filter);
    self
  }

  pub fn filter(&self) -> Option<&::models::QueryRelationsFilter> {
    self.filter.as_ref()
  }

  pub fn reset_filter(&mut self) {
    self.filter = None;
  }

  pub fn set_count(&mut self, count: i32) {
    self.count = Some(count);
  }

  pub fn with_count(mut self, count: i32) -> QueryRelations {
    self.count = Some(count);
    self
  }

  pub fn count(&self) -> Option<&i32> {
    self.count.as_ref()
  }

  pub fn reset_count(&mut self) {
    self.count = None;
  }

  pub fn set_evidence_count(&mut self, evidence_count: i32) {
    self.evidence_count = Some(evidence_count);
  }

  pub fn with_evidence_count(mut self, evidence_count: i32) -> QueryRelations {
    self.evidence_count = Some(evidence_count);
    self
  }

  pub fn evidence_count(&self) -> Option<&i32> {
    self.evidence_count.as_ref()
  }

  pub fn reset_evidence_count(&mut self) {
    self.evidence_count = None;
  }

}



