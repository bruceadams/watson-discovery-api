/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// LogQueryResponse : Object containing results that match the requested **logs** query.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct LogQueryResponse {
  /// Number of matching results.
  #[serde(rename = "matching_results")]
  matching_results: Option<i32>,
  #[serde(rename = "results")]
  results: Option<Vec<::models::LogQueryResponseResult>>
}

impl LogQueryResponse {
  /// Object containing results that match the requested **logs** query.
  pub fn new() -> LogQueryResponse {
    LogQueryResponse {
      matching_results: None,
      results: None
    }
  }

  pub fn set_matching_results(&mut self, matching_results: i32) {
    self.matching_results = Some(matching_results);
  }

  pub fn with_matching_results(mut self, matching_results: i32) -> LogQueryResponse {
    self.matching_results = Some(matching_results);
    self
  }

  pub fn matching_results(&self) -> Option<&i32> {
    self.matching_results.as_ref()
  }

  pub fn reset_matching_results(&mut self) {
    self.matching_results = None;
  }

  pub fn set_results(&mut self, results: Vec<::models::LogQueryResponseResult>) {
    self.results = Some(results);
  }

  pub fn with_results(mut self, results: Vec<::models::LogQueryResponseResult>) -> LogQueryResponse {
    self.results = Some(results);
    self
  }

  pub fn results(&self) -> Option<&Vec<::models::LogQueryResponseResult>> {
    self.results.as_ref()
  }

  pub fn reset_results(&mut self) {
    self.results = None;
  }

}



