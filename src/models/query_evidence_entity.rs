/* 
 * Discovery
 *
 * The IBM Watson&trade; Discovery Service is a cognitive search and content analytics engine that you can add to applications to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual filtering of results.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// QueryEvidenceEntity : Entity description and location within evidence field.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct QueryEvidenceEntity {
  /// The entity type for this entity. Possible types vary based on model used.
  #[serde(rename = "type")]
  type_: Option<String>,
  /// The original text of this entity as found in the evidence field.
  #[serde(rename = "text")]
  text: Option<String>,
  /// The start location of the entity text in the identified field. This value is inclusive.
  #[serde(rename = "start_offset")]
  start_offset: Option<i32>,
  /// The end location of the entity text in the identified field. This value is exclusive.
  #[serde(rename = "end_offset")]
  end_offset: Option<i32>
}

impl QueryEvidenceEntity {
  /// Entity description and location within evidence field.
  pub fn new() -> QueryEvidenceEntity {
    QueryEvidenceEntity {
      type_: None,
      text: None,
      start_offset: None,
      end_offset: None
    }
  }

  pub fn set_type_(&mut self, type_: String) {
    self.type_ = Some(type_);
  }

  pub fn with_type_(mut self, type_: String) -> QueryEvidenceEntity {
    self.type_ = Some(type_);
    self
  }

  pub fn type_(&self) -> Option<&String> {
    self.type_.as_ref()
  }

  pub fn reset_type_(&mut self) {
    self.type_ = None;
  }

  pub fn set_text(&mut self, text: String) {
    self.text = Some(text);
  }

  pub fn with_text(mut self, text: String) -> QueryEvidenceEntity {
    self.text = Some(text);
    self
  }

  pub fn text(&self) -> Option<&String> {
    self.text.as_ref()
  }

  pub fn reset_text(&mut self) {
    self.text = None;
  }

  pub fn set_start_offset(&mut self, start_offset: i32) {
    self.start_offset = Some(start_offset);
  }

  pub fn with_start_offset(mut self, start_offset: i32) -> QueryEvidenceEntity {
    self.start_offset = Some(start_offset);
    self
  }

  pub fn start_offset(&self) -> Option<&i32> {
    self.start_offset.as_ref()
  }

  pub fn reset_start_offset(&mut self) {
    self.start_offset = None;
  }

  pub fn set_end_offset(&mut self, end_offset: i32) {
    self.end_offset = Some(end_offset);
  }

  pub fn with_end_offset(mut self, end_offset: i32) -> QueryEvidenceEntity {
    self.end_offset = Some(end_offset);
    self
  }

  pub fn end_offset(&self) -> Option<&i32> {
    self.end_offset.as_ref()
  }

  pub fn reset_end_offset(&mut self) {
    self.end_offset = None;
  }

}



